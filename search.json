[{"path":"https://merck.github.io/metalite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://merck.github.io/metalite/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://merck.github.io/metalite/articles/adam-mapping.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to Variable Mapping","text":"design abstraction variable mapping enhance robustness metadata information. goal follow dependency inversion principle software design. design inspired ggplot2::aes(). typical analysis, require developer provide variable names : name: reference name key link components. Subject identifier (id): typically using USUBJID ADaM data. Treatment group (group): typically using TRTXX ADaM data. variables (var): additional variables required analysis. subset: subset expression define analysis. Typically using analysis flag XXFL ADaM data. label: natural language describe purpose adam_mapping object.","code":""},{"path":"https://merck.github.io/metalite/articles/adam-mapping.html","id":"example-1-all-participants-as-treated-apat","dir":"Articles","previous_headings":"","what":"Example 1: All Participants as Treated (apat)","title":"Introduction to Variable Mapping","text":"example, define adam_mapping APaT population. example illustrate use case decouple variable name ADSL based data_mapping abstract layer. defined variable mapping, development standard function can rely abstraction. long study team provide proper data associate adam_mapping, standard function can used. R, abstraction named list can accessed .$subset assigned <-. goal summarize var group within population defined subset. can write R scripts abstract layer using base R tidy evaluation .","code":"x <- adam_mapping(   name = \"apat\",   id = \"USUBJID\",   group = \"TRT01A\",   subset = TRTFL == \"Y\",   label = \"All Participants as Treated\" )  x #> ADaM mapping:  #> * `name`   -> \"apat\" #> * `id`     -> \"USUBJID\" #> * `group`  -> \"TRT01A\" #> * `var`    -> NULL #> * `subset` -> TRTFL == \"Y\" #> * `label`  -> \"All Participants as Treated\" x$subset #> TRTFL == \"Y\" x$var <- \"AGE\" x$subset <- quote(SAFFL == \"Y\") # using quote for an expression x #> ADaM mapping:  #> * `name`   -> \"apat\" #> * `id`     -> \"USUBJID\" #> * `group`  -> \"TRT01A\" #> * `var`    -> \"AGE\" #> * `subset` -> SAFFL == \"Y\" #> * `label`  -> \"All Participants as Treated\""},{"path":"https://merck.github.io/metalite/articles/adam-mapping.html","id":"base-r","dir":"Articles","previous_headings":"Example 1: All Participants as Treated (apat)","what":"Base R","title":"Introduction to Variable Mapping","text":"Reference: eval expression.","code":"df <- r2rtf::r2rtf_adsl ana <- df[eval(x$subset, df), ]  split(ana, ana[[x$group]]) |>   sapply(function(y) mean(y[[x$var]])) #>              Placebo Xanomeline High Dose  Xanomeline Low Dose  #>             75.20930             74.38095             75.66667"},{"path":"https://merck.github.io/metalite/articles/adam-mapping.html","id":"tidy-evaluation","dir":"Articles","previous_headings":"Example 1: All Participants as Treated (apat)","what":"Tidy evaluation","title":"Introduction to Variable Mapping","text":"Reference: Programming dplyr. using adam_mapping abstract layer, creates additional challenges develop R program, yet can reduce maintenance future.","code":"library(dplyr) df |>   dplyr::filter(!!x$subset) |>   dplyr::group_by(.data[[x$group]]) |>   dplyr::summarise(mean = mean(.data[[x$var]]))"},{"path":"https://merck.github.io/metalite/articles/adam-mapping.html","id":"example-2-serious-adverse-events-ser","dir":"Articles","previous_headings":"","what":"Example 2: Serious adverse events (ser)","title":"Introduction to Variable Mapping","text":"example, define adam_mapping serious adverse events (AE). example illustrate use case inherit default values defined metalite. organization conventions define different analysis terms. can define default values commonly used analysis terms. example, define default adam_mapping object . real example can found metalite:::default_parameter_ae. default values, user can reduce input still allow override default values required. Assuming user define adam_mapping study, study require footnote explain meaning serious adverse events. merge user defined default adam_mapping objects. (always left join) can keep user defined variables. add default subset variable, defined user. Note: adam_mapping object also allow user define variables. example, added footnote variable.","code":"ser_default <- adam_mapping(   name = \"ser\",   label = \"serious adverse events\",   subset = quote(AESER == \"Y\") )  ser_default #> ADaM mapping:  #> * `name`   -> \"ser\" #> * `id`     -> NULL #> * `group`  -> NULL #> * `var`    -> NULL #> * `subset` -> AESER == \"Y\" #> * `label`  -> \"serious adverse events\" ser_user <- adam_mapping(   name = \"ser\",   id = \"USUBJID\",   group = \"TRT01A\",   label = \"serious{^a} adverse events\",   footnote = \"{^a} this is a footnote\" ) ser_user #> ADaM mapping:  #> * `name`     -> \"ser\" #> * `id`       -> \"USUBJID\" #> * `group`    -> \"TRT01A\" #> * `var`      -> NULL #> * `subset`   -> NULL #> * `label`    -> \"serious{^a} adverse events\" #> * `footnote` -> \"{^a} this is a footnote\" merge(ser_user, ser_default) #> ADaM mapping:  #> * `name`     -> \"ser\" #> * `id`       -> \"USUBJID\" #> * `group`    -> \"TRT01A\" #> * `var`      -> NULL #> * `subset`   -> AESER == \"Y\" #> * `label`    -> \"serious{^a} adverse events\" #> * `footnote` -> \"{^a} this is a footnote\""},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Create AR Grid","text":"document, illustrate create &R grid metalite.","code":""},{"path":[]},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"step-1-input-the-population-and-observation-datasets","dir":"Articles","previous_headings":"Build metadata","what":"Step 1: input the population and observation datasets","title":"Create AR Grid","text":"","code":"metadata <- meta_adam(   population = r2rtf_adsl,   observation = r2rtf_adae )"},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"step-2-create-statistical-analysis-plans","dir":"Articles","previous_headings":"Build metadata","what":"Step 2: create statistical analysis plans","title":"Create AR Grid","text":"","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" ) |>   add_plan(     analysis = \"ae_specific\", population = \"apat\",     observation = c(\"wk12\", \"wk24\"),     parameter = c(\"any\", \"aeosi\", \"rel\", \"ser\")   )"},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"step-3-feed-in-the-analysis-plan-to-the-existing-metadata","dir":"Articles","previous_headings":"Build metadata","what":"Step 3: feed in the analysis plan to the existing metadata","title":"Create AR Grid","text":"","code":"metadata <- metadata |> define_plan(plan)"},{"path":[]},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"step-4-1-define-the-key-words-in-population-observation","dir":"Articles","previous_headings":"Build metadata","what":"Step 4.1: define the key words in population & observation","title":"Create AR Grid","text":"","code":"metadata <- metadata |>   define_population(     name = \"apat\",     group = \"TRT01A\",     subset = SAFFL == \"Y\"   ) |>   define_observation(     name = \"wk12\",     group = \"TRTA\",     subset = SAFFL == \"Y\",     label = \"Weeks 0 to 12\"   ) |>   define_observation(     name = \"wk24\",     group = \"TRTA\",     subset = AOCC01FL == \"Y\", # just for demo, another flag shall be used.     label = \"Weeks 0 to 24\"   )"},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"step-4-2-define-the-key-words-in-the-analysis-plans","dir":"Articles","previous_headings":"Build metadata","what":"Step 4.2 define the key words in the analysis plans","title":"Create AR Grid","text":"","code":"metadata <- metadata |>   define_parameter(     name = \"rel\",     subset = AEREL %in% c(\"POSSIBLE\", \"PROBABLE\")   ) |>   define_parameter(     name = \"aeosi\",     subset = AEOSI == \"Y\",     label = \"adverse events of special interest\"   ) |>   define_analysis(     name = \"ae_summary\",     title = \"Summary of Adverse Events\"   ) |>   define_analysis(     name = \"ae_specific\",     title = \"Summary of Specific Adverse Events\"   )"},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"step-5-build-the-metadata","dir":"Articles","previous_headings":"Build metadata","what":"Step 5: build the metadata","title":"Create AR Grid","text":"","code":"metadata <- metadata |> meta_build()"},{"path":"https://merck.github.io/metalite/articles/ar-grid.html","id":"create-ar-grid","dir":"Articles","previous_headings":"","what":"Create A&R grid","title":"Create AR Grid","text":"Summary Adverse EventsWeeks 0 12All Participants Treated ae0summary0wk12.rtf ae_summary Population: SAFFL == 'Y'Observation: SAFFL == 'Y' Summary Adverse EventsWeeks 0 24All Participants Treated ae0summary0wk24.rtf ae_summary Population: SAFFL == 'Y'Observation: AOCC01FL == 'Y' Summary Specific Adverse EventsWeeks 0 12All Participants Treated ae0specific0wk120any.rtf ae_specific Population: SAFFL == 'Y'Observation: SAFFL == 'Y' Summary Specific Adverse EventsWeeks 0 24All Participants Treated ae0specific0wk240any.rtf ae_specific Population: SAFFL == 'Y'Observation: AOCC01FL == 'Y' Summary Specific Adverse EventsWeeks 0 12All Participants Treated ae0specific0wk120aeosi.rtf ae_specific Population: SAFFL == 'Y'Observation: SAFFL == 'Y' AEOSI == 'Y' Summary Specific Adverse EventsWeeks 0 24All Participants Treated ae0specific0wk240aeosi.rtf ae_specific Population: SAFFL == 'Y'Observation: AOCC01FL == 'Y' AEOSI == 'Y' Summary Specific Adverse EventsWeeks 0 12All Participants Treated ae0specific0wk120rel.rtf ae_specific Population: SAFFL == 'Y'Observation: SAFFL == 'Y' AEREL %% c('POSSIBLE', 'PROBABLE') Summary Specific Adverse EventsWeeks 0 24All Participants Treated ae0specific0wk240rel.rtf ae_specific Population: SAFFL == 'Y'Observation: AOCC01FL == 'Y' AEREL %% c('POSSIBLE', 'PROBABLE') Summary Specific Adverse EventsWeeks 0 12All Participants Treated ae0specific0wk120ser.rtf ae_specific Population: SAFFL == 'Y'Observation: SAFFL == 'Y' AESER == 'Y' Summary Specific Adverse EventsWeeks 0 24All Participants Treated ae0specific0wk240ser.rtf ae_specific Population: SAFFL == 'Y'Observation: AOCC01FL == 'Y' AESER == 'Y'","code":"ar_grid <- data.frame(   title = spec_title(metadata),   filename = spec_filename(metadata),   function_name = metadata$plan$analysis,   population = spec_analysis_population(metadata) ) ar_grid |>   mutate(across(everything(), ~ gsub(\"\\n\", \"<br>\", .x))) |>   gt::gt() |>   gt::fmt_markdown(columns = gt::everything()) |>   gt::tab_options(table.font.size = 15)"},{"path":"https://merck.github.io/metalite/articles/component.html","id":"collect-adam-mapping","dir":"Articles","previous_headings":"","what":"Collect ADaM mapping","title":"Collect Components","text":"object meta organized list ADaM mapping objects. example, can directly access ADaM mapping object list. created helper function help access components component name. example, can collect apat component meta name using collect_adam_mapping(). Collect ADaM mapping participants treated. can collect ADaM mapping serious adverse events parameter meta$parameter$ser. can collect ADaM mapping AE summary analysis method meta$analysis$ae_summary.","code":"meta$population$apat #> ADaM mapping:  #> * `name`   -> \"apat\" #> * `id`     -> \"USUBJID\" #> * `group`  -> \"TRTA\" #> * `var`    -> NULL #> * `subset` -> SAFFL == \"Y\" #> * `label`  -> \"All Participants as Treated\" collect_adam_mapping(meta, name = \"apat\") #> ADaM mapping:  #> * `name`      -> \"apat\" #> * `id`        -> \"USUBJID\" #> * `group`     -> \"TRTA\" #> * `var`       -> NULL #> * `subset`    -> SAFFL == \"Y\" #> * `label`     -> \"All Participants as Treated\" #> * `.location` -> \"population\" collect_adam_mapping(meta, name = \"ser\") #> ADaM mapping:  #> * `name`      -> \"ser\" #> * `id`        -> NULL #> * `group`     -> NULL #> * `var`       -> \"AEDECOD\" #> * `subset`    -> AESER == \"Y\" #> * `label`     -> \"serious adverse events\" #> * `soc`       -> \"AEBODSYS\" #> * `seq`       -> 401 #> * `term1`     -> \"Serious\" #> * `term2`     -> \"\" #> * `summ_row`  -> \"with serious adverse events\" #> * `.location` -> \"parameter\" collect_adam_mapping(meta, name = \"ae_summary\") #> ADaM mapping:  #> * `name`      -> \"ae_summary\" #> * `id`        -> NULL #> * `group`     -> NULL #> * `var`       -> NULL #> * `subset`    -> NULL #> * `label`     -> \"Table: adverse event summary\" #> * `title`     -> \"Summary of Adverse Events\" #> * `.location` -> \"analysis\""},{"path":"https://merck.github.io/metalite/articles/component.html","id":"collect-population","dir":"Articles","previous_headings":"","what":"Collect population","title":"Collect Components","text":"developing tools, developer also need access subset condition population. can access information list Equivalently, can also use collect_population() collect definition population. example, can collect subset condition apat using collect_population(), can find subset condition multiple levels. example, can collect analysis population definition apat population, wk12 observation ser parameters.","code":"meta$population$apat$subset #> SAFFL == \"Y\" collect_population(meta, population = \"apat\") #> $population #> [1] \"SAFFL == 'Y'\" collect_population(meta,   population = \"apat\",   observation = \"wk12\",   parameter = \"ser\" ) #> $population #> [1] \"SAFFL == 'Y'\" #>  #> $observation #> [1] \"SAFFL == 'Y'\" #>  #> $parameter #> [1] \"AESER == 'Y'\""},{"path":"https://merck.github.io/metalite/articles/component.html","id":"collect-population-records","dir":"Articles","previous_headings":"","what":"Collect population records","title":"Collect Components","text":"User may want identify records belong analysis population. can use collect_population_index() show population record index. example, user get index population data set apat participants treated. Alternatively, people may want know ID subjects population. case, collect_population_id() can used collect ID - > USUBJID apat population. can directly collect observations using collect_population_record(). default, key variables used id, group, subset displayed. example shows collect population record population data set participants treated display default variables. example show add variables population data set display. can also add add multiple additional variable display","code":"population_index <- collect_population_index(meta, \"apat\") head(collect_population_index(meta, \"apat\")) #> [1] 1 2 3 4 5 6 population_id <- collect_population_id(meta, \"apat\") head(collect_population_id(meta, \"apat\")) #> [1] \"01-701-1015\" \"01-701-1023\" \"01-701-1028\" \"01-701-1033\" \"01-701-1034\" #> [6] \"01-701-1047\" head(collect_population_record(meta, \"apat\")) #>       USUBJID                 TRTA SAFFL #> 1 01-701-1015              Placebo     Y #> 2 01-701-1023              Placebo     Y #> 3 01-701-1028 Xanomeline High Dose     Y #> 4 01-701-1033  Xanomeline Low Dose     Y #> 5 01-701-1034 Xanomeline High Dose     Y #> 6 01-701-1047              Placebo     Y head(collect_population_record(meta, \"apat\", var = \"AGE\")) #>       USUBJID                 TRTA SAFFL AGE #> 1 01-701-1015              Placebo     Y  63 #> 2 01-701-1023              Placebo     Y  64 #> 3 01-701-1028 Xanomeline High Dose     Y  71 #> 4 01-701-1033  Xanomeline Low Dose     Y  74 #> 5 01-701-1034 Xanomeline High Dose     Y  77 #> 6 01-701-1047              Placebo     Y  85 head(collect_population_record(meta, \"apat\", var = c(\"AGE\", \"TRT01P\"))) #>       USUBJID                 TRTA SAFFL AGE               TRT01P #> 1 01-701-1015              Placebo     Y  63              Placebo #> 2 01-701-1023              Placebo     Y  64              Placebo #> 3 01-701-1028 Xanomeline High Dose     Y  71 Xanomeline High Dose #> 4 01-701-1033  Xanomeline Low Dose     Y  74  Xanomeline Low Dose #> 5 01-701-1034 Xanomeline High Dose     Y  77 Xanomeline High Dose #> 6 01-701-1047              Placebo     Y  85              Placebo"},{"path":"https://merck.github.io/metalite/articles/component.html","id":"collect-observation-record","dir":"Articles","previous_headings":"","what":"Collect observation record","title":"Collect Components","text":"Similarly can collect observation records examples . example shows collect observation record index observation data set serious AE weeks 0 12 using collect_observation_index() can also directly collect records using collect_observation_record(). default, key variables used id, group, subset displayed. example shows collect observation record observation data set participants treated 0 12 week serious AE display default variables. example show add variables observation data set display.","code":"collect_observation_index(meta, \"apat\", \"wk12\", \"ser\") #> [1]  689 1131 1173 collect_observation_record(meta, \"apat\", \"wk12\", \"ser\") #>          USUBJID                 TRTA #> 689  01-709-1424 Xanomeline High Dose #> 1131 01-718-1170  Xanomeline Low Dose #> 1173 01-718-1371 Xanomeline High Dose #>                                             AEDECOD SAFFL AESER #> 689                                         SYNCOPE     Y     Y #> 1131                                        SYNCOPE     Y     Y #> 1173 PARTIAL SEIZURES WITH SECONDARY GENERALISATION     Y     Y collect_observation_record(meta, \"apat\", \"wk12\", \"ser\", var = \"AEDECOD\") #>          USUBJID                 TRTA #> 689  01-709-1424 Xanomeline High Dose #> 1131 01-718-1170  Xanomeline Low Dose #> 1173 01-718-1371 Xanomeline High Dose #>                                             AEDECOD SAFFL AESER #> 689                                         SYNCOPE     Y     Y #> 1131                                        SYNCOPE     Y     Y #> 1173 PARTIAL SEIZURES WITH SECONDARY GENERALISATION     Y     Y"},{"path":"https://merck.github.io/metalite/articles/component.html","id":"collect-specifications","dir":"Articles","previous_headings":"","what":"Collect specifications","title":"Collect Components","text":"also provided helper functions collect commonly used items Developer can collect table title analysis function meta information using collect_title(). Developer can collect specification data set name using collect_dataname(). show data set name population observation.","code":"collect_title(meta, \"apat\", \"wk12\", \"ser\", \"ae_summary\") #> [1] \"Summary of Adverse Events\"   \"Weeks 0 to 12\"               #> [3] \"All Participants as Treated\" collect_dataname(meta) #>  population observation  #>      \"adsl\"      \"adae\""},{"path":"https://merck.github.io/metalite/articles/metalite.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to metalite","text":"purpose metalite unify data structure saving metadata information clinical analysis & reporting (&R), leveraging Analysis Data Model (ADaM) datasets consistent accurate metadata representation. metalite framework designed : Standardize function input analysis reporting. Enable use pipes (|>). Reduce manual steps maintain SDLC documentation. Ensure consistency analysis specification, mock, results. built metalite following principles: Automation: prefer function call checklist. example, enter data source one time AE analysis. End--end: cover steps software development lifecycle (SDLC) define delivery.","code":""},{"path":"https://merck.github.io/metalite/articles/metalite.html","id":"use-cases","dir":"Articles","previous_headings":"","what":"Use cases","title":"Introduction to metalite","text":"metalite package offers foundation simplify tool development create standard engineering workflows. example, metalite can used : Standardize input output &R functions. Create analysis reporting planning grid. Create mock table. Create validate &R results. Trace analysis records. metalite needs work R packages complete work. idea illustrated diagram .","code":""},{"path":"https://merck.github.io/metalite/articles/metalite.html","id":"mental-model","dir":"Articles","previous_headings":"","what":"Mental model","title":"Introduction to metalite","text":"typical analysis reporting based ADaM data contain three layers. Data Analysis plan Analysis metadata design metalite align layers using meta_adam define_xxx functions.","code":""},{"path":"https://merck.github.io/metalite/articles/metalite.html","id":"example-adverse-events-analysis","dir":"Articles","previous_headings":"Mental model","what":"Example: adverse events analysis","title":"Introduction to metalite","text":"use simplified adverse events analysis example illustrate mental model. Observation level: ADAE Population level: ADSL typical adverse events analysis, AE records saved ADAE (observation level) population information saved ADSL (population level). demo ADaM datasets r2rtf package, can construct object using meta_adam(). &R grid validation tracker mock table also need understand analysis plan adverse events analysis. Specifically, details table, listing figure (TLF) use two helper functions (plan() add_plan()) create analysis plan. analysis plan data frame indicate specification TLF. code , construct 10 TLFs based different combination analysis function, population, observation parameter. , can define analysis plan using define_plan(). population (define_population()): e.g.: name = \"apat\", group = \"TRT01A\", subset = SAFFL == \"Y\" observation (define_observation()): e.g.: name = \"wk12\", group = \"TRTA\", subset = SAFFL == \"Y\", label = \"Weeks 0 12\" parameter (define_parameter()): e.g.: name = \"ser\", subset = AESER == \"Y\", label = \"serious adverse events\" analysis (define_analysis()): AE summary, Specific AE table, Rainfall plot (static interactive), Volcano plot, etc. details needs defined metadata information. example, select APaT population ADSL dataset. achieved defining population. defined built-information follows &R conventions. , programs know meaning apat . project specific information still needs provided study team group variable name subset flag condition. Similarly, can define meta information analysis observation, parameter function. also use meta_build() add default values name specified. metalite, saved demo meta_example() illustrate different use cases. developer, can reuse meta information development. also allow developers standardize input functions. plan$analysis analysis name. meta columns plan() function arguments","code":"meta_adam(   observation = r2rtf_adae,   population = r2rtf_adsl ) #> ADaM metadata:  #>    .$data_population     Population data with 254 subjects  #>    .$data_observation    Observation data with 1191 records plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" ) |>   add_plan(     analysis = \"ae_specific\", population = \"apat\",     observation = c(\"wk12\", \"wk24\"),     parameter = c(\"any\", \"aeosi\", \"rel\", \"ser\")   )  plan #>    mock    analysis population observation   parameter #> 1     1  ae_summary       apat        wk12 any;rel;ser #> 2     1  ae_summary       apat        wk24 any;rel;ser #> 3     1 ae_specific       apat        wk12         any #> 4     1 ae_specific       apat        wk24         any #> 5     1 ae_specific       apat        wk12       aeosi #> 6     1 ae_specific       apat        wk24       aeosi #> 7     1 ae_specific       apat        wk12         rel #> 8     1 ae_specific       apat        wk24         rel #> 9     1 ae_specific       apat        wk12         ser #> 10    1 ae_specific       apat        wk24         ser meta_adam(   population = r2rtf_adsl,   observation = r2rtf_adae ) |>   define_plan(plan) #> ADaM metadata:  #>    .$data_population     Population data with 254 subjects  #>    .$data_observation    Observation data with 1191 records  #>    .$plan    Analysis plan with 10 plans meta_adam(   population = r2rtf_adsl,   observation = r2rtf_adae ) |>   define_plan(plan) |>   define_population(name = \"apat\") #> ADaM metadata:  #>    .$data_population     Population data with 254 subjects  #>    .$data_observation    Observation data with 1191 records  #>    .$plan    Analysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id group var subset                         label #> 1 'apat' 'USUBJID'                  'All Participants as Treated' meta_adam(   population = r2rtf_adsl,   observation = r2rtf_adae ) |>   define_plan(plan) |>   define_population(     name = \"apat\",     group = \"TRT01A\",     subset = SAFFL == \"Y\"   ) #> ADaM metadata:  #>    .$data_population     Population data with 254 subjects  #>    .$data_observation    Observation data with 1191 records  #>    .$plan    Analysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id    group var       subset                         label #> 1 'apat' 'USUBJID' 'TRT01A'     SAFFL == 'Y' 'All Participants as Treated' meta_adam(   population = r2rtf_adsl,   observation = r2rtf_adae ) |>   define_plan(plan = plan) |>   define_population(     name = \"apat\",     group = \"TRT01A\",     subset = SAFFL == \"Y\"   ) |>   define_observation(     name = \"wk12\",     group = \"TRTA\",     subset = SAFFL == \"Y\",     label = \"Weeks 0 to 12\"   ) |>   define_observation(     name = \"wk24\",     group = \"TRTA\",     subset = AOCC01FL == \"Y\", # just for demo, another flag shall be used.     label = \"Weeks 0 to 24\"   ) |>   define_parameter(     name = \"rel\",     subset = AEREL %in% c(\"POSSIBLE\", \"PROBABLE\")   ) |>   define_parameter(     name = \"aeosi\",     subset = AEOSI == \"Y\",     label = \"adverse events of special interest\"   ) |>   define_analysis(     name = \"ae_summary\",     title = \"Summary of Adverse Events\"   ) |>   meta_build() #> ADaM metadata:  #>    .$data_population     Population data with 254 subjects  #>    .$data_observation    Observation data with 1191 records  #>    .$plan    Analysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id    group var       subset                         label #> 1 'apat' 'USUBJID' 'TRT01A'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>     name        id  group var          subset           label #> 1 'wk12' 'USUBJID' 'TRTA'        SAFFL == 'Y' 'Weeks 0 to 12' #> 2 'wk24' 'USUBJID' 'TRTA'     AOCC01FL == 'Y' 'Weeks 0 to 24' #>  #>  #>   Analysis parameter type: #>      name                                label #> 1   'rel'        'drug-related adverse events' #> 2 'aeosi' 'adverse events of special interest' #> 3   'any'                 'any adverse events' #> 4   'ser'             'serious adverse events' #>                                 subset #> 1 AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2                         AEOSI == 'Y' #> 3                                      #> 4                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                           label #> 1  'ae_summary'  'Table: adverse event summary' #> 2 'ae_specific' 'Table: specific adverse event' ae_summary(   meta,   population,   observation,   parameter, ... )"},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"overview-of-the-example-we-used","dir":"Articles","previous_headings":"","what":"Overview of the example we used","title":"Create Mockup Table Based on Metadata","text":"example, available datasets adae adsl, available r2rtf package, .e., r2rtf::r2rtf_adae r2rtf::r2rtf_adsl. two datasets, objective conduct two adverse event (AE) analysis: (1) AE summary analysis (3) specific AE analysis. population two analysis participants treated (APaT). Besides, one observations two analysis: weeks 0-12. analysis, interested three types AEs: (1) AEs, (2) series AEs, (3) drug-related AEs. Please note example servers illustration purpose, instead comprehensive production ready work. users interested AE analysis AE categories, get types populations/observations, modification code vignette needed.","code":""},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"prepare-the-metadata","dir":"Articles","previous_headings":"","what":"Prepare the metadata","title":"Create Mockup Table Based on Metadata","text":"section, introduce steps prepare metadata used aforementioned two AE analysis.","code":""},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"step-1-define-the-metadata","dir":"Articles","previous_headings":"Prepare the metadata","what":"Step 1: Define the metadata","title":"Create Mockup Table Based on Metadata","text":"define metadata, users need specify population observations datasets. example, observation dataset comes r2rtf::r2rtf_adae population dataset comes r2rtf::r2rtf_adsl. define metadata meta_adam() follows, users can specify observation dataset name population dataset name.","code":"adae <- r2rtf::r2rtf_adae adsl <- r2rtf::r2rtf_adsl |> rename(TRTA = TRT01A) meta <- meta_adam(   observation = adae,   population = adsl )"},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"step-2-define-the-analysis-plan","dir":"Articles","previous_headings":"Prepare the metadata","what":"Step 2: Define the analysis plan","title":"Create Mockup Table Based on Metadata","text":"start mockup tables, begin defining mockup analysis plan. define analysis plan, use plan() add_plan() add details per one mockup analysis. Recall example, 2 analysis plans: AE summary; Specific AE analysis. AE summary analysis, define analysis = \"ae_summary\". Similarly define proper population, observation parameter key words population = \"apat\": Participants Treated (APaT). observation = \"wk12\": Weeks 0-12 analyses. parameter = \";rel;ser\": table cover “”, “drug related” “serious” adverse events. AE specific analysis, users can follow similar logic AE summary. , can define analysis plan total 2 mockup generate 4 TLFs. , use incorporate defined plan metadata using define_plan(), .e.,","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = \"wk12\", parameter = \"any;rel;ser\" ) |>   add_plan(     analysis = \"ae_specific\", population = \"apat\",     observation = \"wk12\",     parameter = c(\"any\", \"rel\", \"ser\")   ) plan #>   mock    analysis population observation   parameter #> 1    1  ae_summary       apat        wk12 any;rel;ser #> 2    1 ae_specific       apat        wk12         any #> 3    1 ae_specific       apat        wk12         rel #> 4    1 ae_specific       apat        wk12         ser meta <- meta |> define_plan(plan)"},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"step-3-define-the-keywords","dir":"Articles","previous_headings":"Prepare the metadata","what":"Step 3: Define the keywords","title":"Create Mockup Table Based on Metadata","text":"defining overview analysis plan, begin define meaning key words. Define keywords population: following code define keywords \"apat\", population keywords APaT population. also cover key information group variable, group order, etc… Define keywords observation: following code define keywords \"wk12\", observation keywords Weeks 0-12 observations. Define keywords analysis plans: Note analysis plan, 5 keywords: \"\": parameter keywords adverse events. \"rel\": parameter keywords drug-related adverse events. \"ser\": parameter keywords serious adverse events. \"ae_summary\": analysis keywords AE summary analysis. \"ae_specific\": analysis keywords specific AE analysis. first three keywords, can define define_parameter() follows. can add (1) endnotes, (2) labels, (3) criterion filter, etc. last two keywords, can define define_analysis(). vignette, present mockup table AE summary. users interested specific AE analysis, please define keywords \"ae_specific\" define_analysis(name = \"ae_specific\", title = ...).","code":"meta <- meta |>   define_population(     name = \"apat\",     group = \"TRTA\",     group_order = c(       \"High Dose\" = \"Xanomeline High Dose\",       \"Placebo\" = \"Placebo\"     ),     subset = SAFFL == \"Y\"   ) meta <- meta |>   define_observation(     name = \"wk12\",     group = \"TRTA\",     ae_var = \"AEDECOD\",     var = c(\"AEREL\", \"AESER\"),     subset = SAFFL == \"Y\",     label = \"Weeks 0 to 12\"   ) meta <- meta |>   define_parameter(     name = \"any\",     end_notes = c()   ) |>   define_parameter(     name = \"rel\",     subset = AEREL %in% c(\"POSSIBLE\", \"PROBABLE\"),     label = \"drug-realted adverse events\"   ) |>   define_parameter(     name = \"ser\",     subset = AESER == \"Y\",     label = \"serious adverse events\",     end_notes = c(\"Serious adverse events up to 90 days of last dose are included.\")   ) meta <- meta |>   define_analysis(     name = \"ae_summary\",     title = \"Summary of Adverse Events\"   )"},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"step-4-build-and-review-the-metadata","dir":"Articles","previous_headings":"Prepare the metadata","what":"Step 4: Build and review the metadata","title":"Create Mockup Table Based on Metadata","text":"keywords, datasets, analysis plan defined, users can build metadata compose information. entire metadata built, users can review analysis plan entire meta ","code":"meta <- meta |> meta_build() meta$plan #>   mock    analysis population observation   parameter #> 1    1  ae_summary       apat        wk12 any;rel;ser #> 2    1 ae_specific       apat        wk12         any #> 3    1 ae_specific       apat        wk12         rel #> 4    1 ae_specific       apat        wk12         ser meta #> ADaM metadata:  #>    .$data_population     Population data with 254 subjects  #>    .$data_observation    Observation data with 1191 records  #>    .$plan    Analysis plan with 4 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset                         label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'All Participants as Treated' #>                     group_order #> 1 Xanomeline High Dose, Placebo #>  #>  #>   Analysis observation type: #>     name        id  group          var       subset           label    ae_var #> 1 'wk12' 'USUBJID' 'TRTA' AEREL, AESER SAFFL == 'Y' 'Weeks 0 to 12' 'AEDECOD' #>  #>  #>   Analysis parameter type: #>    name                         label                               subset #> 1 'any'          'any adverse events'                                      #> 2 'rel' 'drug-realted adverse events' AEREL %in% c('POSSIBLE', 'PROBABLE') #> 3 'ser'      'serious adverse events'                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                           label #> 1  'ae_summary'  'Table: adverse event summary' #> 2 'ae_specific' 'Table: specific adverse event'"},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"add-components-of-mockup-table","dir":"Articles","previous_headings":"","what":"Add components of mockup table","title":"Create Mockup Table Based on Metadata","text":"Based mockup table, specify additional parameters required function define next section. mockup = TRUE create mockup analysis. output_report define output path based analysis keywords. plan updated, can construct call program. also provide global argument data source. pending effort define ae_summary() ae_specific() function can generate mock tables based inputs.","code":"meta$plan <- meta$plan |>   mutate(     mockup = TRUE,     output_report = paste0(\"./tlf/mock-\", analysis, \".rtf\")   ) meta$plan #>   mock    analysis population observation   parameter mockup #> 1    1  ae_summary       apat        wk12 any;rel;ser   TRUE #> 2    1 ae_specific       apat        wk12         any   TRUE #> 3    1 ae_specific       apat        wk12         rel   TRUE #> 4    1 ae_specific       apat        wk12         ser   TRUE #>                output_report #> 1  ./tlf/mock-ae_summary.rtf #> 2 ./tlf/mock-ae_specific.rtf #> 3 ./tlf/mock-ae_specific.rtf #> 4 ./tlf/mock-ae_specific.rtf spec_call_program(meta,   data_source = \"[adam-adsl; adae]\" ) #> [1] \"ae_summary(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any;rel;ser', mockup = TRUE, output_report = './tlf/mock-ae_summary.rtf', data_source = '[adam-adsl; adae]')\" #> [2] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any', mockup = TRUE, output_report = './tlf/mock-ae_specific.rtf', data_source = '[adam-adsl; adae]')\"       #> [3] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'rel', mockup = TRUE, output_report = './tlf/mock-ae_specific.rtf', data_source = '[adam-adsl; adae]')\"       #> [4] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'ser', mockup = TRUE, output_report = './tlf/mock-ae_specific.rtf', data_source = '[adam-adsl; adae]')\""},{"path":"https://merck.github.io/metalite/articles/mockup-table.html","id":"create-functions","dir":"Articles","previous_headings":"","what":"Create functions","title":"Create Mockup Table Based on Metadata","text":"Let’s create simplified version ae_summary() illustrate idea. illustration purposes, create mock table first row.","code":"ae_summary <- function(meta,                        population,                        observation,                        parameter,                        mockup,                        output_report,                        data_source,                        ...) {   # Identify parameter keywords   para_list <- unlist(strsplit(parameter, \";\"))    # Row label   ae_label <- vapply(para_list,     FUN = function(x) {       collect_adam_mapping(meta, x)$label     },     FUN.VALUE = character(1)   )    # Get treatment grouping order   trt_order <- eval(collect_adam_mapping(meta, population)$group_order)    # Get the title/endnotes of TLF   title_text <- collect_title(     meta = meta,     population = population,     observation = observation,     parameter = parameter, analysis = \"ae_summary\"   )   title_text[2] <- \"{Week}\"    # Logic to create mockup table   if (mockup) {     # Generate RTF     x <- tibble::tibble(       ae_label = ae_label,       n_1 = rep(\"x\", length(ae_label)),       n_2 = rep(\"x\", length(ae_label)), # no display_total/CI       pct_1 = rep(\"x.xx\", length(ae_label)),       pct_2 = rep(\"x.xx\", length(ae_label))     ) |>       dplyr::select(ae_label, n_1, pct_1, n_2, pct_2, everything()) |>       # r2rtf::rtf_title(rtf_mock_color(title_text)) |>       r2rtf::rtf_title(title_text) |>       r2rtf::rtf_colheader(paste0(\" | \", paste(names(trt_order), collapse = \" | \"), \" \"),         col_rel_width = c(3, rep(2, length(trt_order)))       ) |>       r2rtf::rtf_colheader(\" | n | (%) | n | (%) \",         border_top = c(\"\", rep(\"single\", 2 * length(trt_order))),         border_bottom = \"single\",         border_left = c(\"single\", rep(c(\"single\", \"\"), length(trt_order))),         col_rel_width = c(3, rep(1, 2 * length(trt_order)))       ) |>       r2rtf::rtf_body(         col_rel_width = c(3, rep(1, 2 * length(trt_order))),         border_left = c(\"single\", rep(c(\"single\", \"\"), length(trt_order))),         text_justification = c(\"l\", rep(\"c\", 2 * length(trt_order)))       ) |>       r2rtf::rtf_source(data_source)      # Require r2rtf to use color     attr(x, \"page\")$use_color <- TRUE      # Save RTF to a path     if (!is.null(output_report)) {       x |>         r2rtf::rtf_encode() |>         r2rtf::write_rtf(output_report)     }   }    if (!mockup) {     # Logic to perform actual AE summary table.     # Omit here   }    output_report } meta_run(meta,   i = 1,   data_source = \"[adam-adsl; adae]\" ) #> $`ae_summary(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any;rel;ser', mockup = TRUE, output_report = './tlf/mock-ae_summary.rtf', data_source = '[adam-adsl; adae]')` #> [1] \"./tlf/mock-ae_summary.rtf\""},{"path":[]},{"path":"https://merck.github.io/metalite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yilong Zhang. Author. Yujie Zhao. Author, maintainer. Nan Xiao. Author. Benjamin Wang. Contributor. Brian Lang. Contributor. Howard Baek. Contributor. Ruchitbhai Patel. Contributor. Madhusudhan Ginnaram. Contributor. Sarad Nepal. Contributor. Venkatesh Burla. Contributor. Merck Sharp & Dohme Corp. Copyright holder.","code":""},{"path":"https://merck.github.io/metalite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang Y, Zhao Y, Xiao N (2023). metalite: ADaM Metadata Structure. https://merck.github.io/metalite/, https://github.com/Merck/metalite.","code":"@Manual{,   title = {metalite: ADaM Metadata Structure},   author = {Yilong Zhang and Yujie Zhao and Nan Xiao},   year = {2023},   note = {https://merck.github.io/metalite/, https://github.com/Merck/metalite}, }"},{"path":"https://merck.github.io/metalite/index.html","id":"metalite-","dir":"","previous_headings":"","what":"ADaM Metadata Structure","title":"ADaM Metadata Structure","text":"Unified data structure metadata information clinical analysis & reporting (&R), leveraging Analysis Data Model (ADaM) datasets consistent accurate metadata representation.","code":""},{"path":"https://merck.github.io/metalite/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"ADaM Metadata Structure","text":"metalite framework designed : Standardize function input analysis reporting. Separate analysis logic data source. Enable use pipes (|>). Reduce manual steps develop maintain documentation clinical trial development. Ensure consistency analysis specification, mock, results.","code":""},{"path":"https://merck.github.io/metalite/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use cases","title":"ADaM Metadata Structure","text":"metalite package offers foundation simplify tool development create standard engineering workflows. example, metalite can used : Standardize input output &R functions. Create analysis reporting planning grid. Create mock table. Create validate &R results. Trace analysis records. Note: metalite low-level R package needs work R packages complete work. idea illustrated diagram .","code":""},{"path":"https://merck.github.io/metalite/index.html","id":"design-principles","dir":"","previous_headings":"","what":"Design principles","title":"ADaM Metadata Structure","text":"built metalite following principles: Automation: prefer function call checklist. example, enter data source one time AE analysis. End--end: cover steps software development lifecycle (SDLC) define delivery.","code":""},{"path":"https://merck.github.io/metalite/reference/adam_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct ADaM mappings — adam_mapping","title":"Construct ADaM mappings — adam_mapping","text":"ADaM mappings describe variables meta information ADaM data mapped standardized term.","code":""},{"path":"https://merck.github.io/metalite/reference/adam_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct ADaM mappings — adam_mapping","text":"","code":"adam_mapping(   name,   id = NULL,   group = NULL,   var = NULL,   subset = NULL,   label = NULL,   ... )"},{"path":"https://merck.github.io/metalite/reference/adam_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct ADaM mappings — adam_mapping","text":"name character value term name. term name used key link information. id character value subject identifier variable name ADaM dataset. group character vector group variable names ADaM dataset. var character vector useful variable names ADaM dataset. subset expression identify analysis records. See base::subset(). label character value analysis label. ... Additional variables.","code":""},{"path":"https://merck.github.io/metalite/reference/adam_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct ADaM mappings — adam_mapping","text":"list class adam_mapping. Components list either quosures constants.","code":""},{"path":"https://merck.github.io/metalite/reference/adam_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct ADaM mappings — adam_mapping","text":"design inspired ggplot2::aes().","code":""},{"path":"https://merck.github.io/metalite/reference/adam_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct ADaM mappings — adam_mapping","text":"","code":"adam_mapping(   name = \"apat\",   id = \"USUBJID\",   group = \"TRT01A\",   subset = TRTFL == \"Y\",   label = \"All Participants as Treated\" ) #> ADaM mapping:  #> * `name`   -> \"apat\" #> * `id`     -> \"USUBJID\" #> * `group`  -> \"TRT01A\" #> * `var`    -> NULL #> * `subset` -> TRTFL == \"Y\" #> * `label`  -> \"All Participants as Treated\""},{"path":"https://merck.github.io/metalite/reference/add_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Add additional analysis plan — add_plan","title":"Add additional analysis plan — add_plan","text":"Add additional analysis plan","code":""},{"path":"https://merck.github.io/metalite/reference/add_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add additional analysis plan — add_plan","text":"","code":"add_plan(plan, analysis, population, observation, parameter, ...)"},{"path":"https://merck.github.io/metalite/reference/add_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add additional analysis plan — add_plan","text":"plan meta_plan object. analysis character value analysis term name. term name used key link information. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information. ... Additional arguments.","code":""},{"path":"https://merck.github.io/metalite/reference/add_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add additional analysis plan — add_plan","text":"data frame containing analysis plans new plans added.","code":""},{"path":"https://merck.github.io/metalite/reference/add_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add additional analysis plan — add_plan","text":"","code":"plan(\"ae_summary\",   population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel\" ) |>   add_plan(\"ae_specific\",     population = \"apat\",     observation = c(\"wk12\", \"wk24\"), parameter = c(\"any\", \"rel\")   ) #>   mock    analysis population observation parameter #> 1    1  ae_summary       apat        wk12   any;rel #> 2    1  ae_summary       apat        wk24   any;rel #> 3    1 ae_specific       apat        wk12       any #> 4    1 ae_specific       apat        wk24       any #> 5    1 ae_specific       apat        wk12       rel #> 6    1 ae_specific       apat        wk24       rel"},{"path":"https://merck.github.io/metalite/reference/assign_label.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to assign labels to a data frame — assign_label","title":"A function to assign labels to a data frame — assign_label","text":"function assign labels data frame","code":""},{"path":"https://merck.github.io/metalite/reference/assign_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to assign labels to a data frame — assign_label","text":"","code":"assign_label(data, var = names(data), label = names(data))"},{"path":"https://merck.github.io/metalite/reference/assign_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to assign labels to a data frame — assign_label","text":"data data frame. var variables assign labels. label labels assigned.","code":""},{"path":"https://merck.github.io/metalite/reference/assign_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to assign labels to a data frame — assign_label","text":"data frame labels updated.","code":""},{"path":"https://merck.github.io/metalite/reference/assign_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to assign labels to a data frame — assign_label","text":"Case 1: variable's label already define original data frame redefined assign_label(...), original labels kept. Case 2: variable's label already define original data frame re-defined assign_label(...), labels re-defined. Case 3: variable's label define original data frame defined assign_label(...), labels added. Case 4: variable's label define original data frame, neither defined assign_label(...), labels variable name .","code":""},{"path":"https://merck.github.io/metalite/reference/assign_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to assign labels to a data frame — assign_label","text":"","code":"assign_label(r2rtf::r2rtf_adae) |> head() #>        STUDYID SITEID     USUBJID    TRTA TRTAN AGE AGEGR1 AGEGR1N  RACE RACEN #> 1 CDISCPILOT01    701 01-701-1015 Placebo     0  63    <65       1 WHITE     1 #> 2 CDISCPILOT01    701 01-701-1015 Placebo     0  63    <65       1 WHITE     1 #> 3 CDISCPILOT01    701 01-701-1015 Placebo     0  63    <65       1 WHITE     1 #> 4 CDISCPILOT01    701 01-701-1023 Placebo     0  64    <65       1 WHITE     1 #> 5 CDISCPILOT01    701 01-701-1023 Placebo     0  64    <65       1 WHITE     1 #> 6 CDISCPILOT01    701 01-701-1023 Placebo     0  64    <65       1 WHITE     1 #>   SEX SAFFL     TRTSDT     TRTEDT      ASTDT ASTDTF ASTDY      AENDT AENDY #> 1   F     Y 2014-01-02 2014-07-02 2014-01-03            2       <NA>    NA #> 2   F     Y 2014-01-02 2014-07-02 2014-01-03            2       <NA>    NA #> 3   F     Y 2014-01-02 2014-07-02 2014-01-09            8 2014-01-11    10 #> 4   M     Y 2012-08-05 2012-09-01 2012-08-07            3 2012-08-30    26 #> 5   M     Y 2012-08-05 2012-09-01 2012-08-07            3       <NA>    NA #> 6   M     Y 2012-08-05 2012-09-01 2012-08-26           22       <NA>    NA #>   ADURN ADURU                               AETERM                    AELLT #> 1    NA                  APPLICATION SITE ERYTHEMA APPLICATION SITE REDNESS #> 2    NA                  APPLICATION SITE PRURITUS APPLICATION SITE ITCHING #> 3     3   DAY                            DIARRHOEA                 DIARRHEA #> 4    24   DAY                             ERYTHEMA                 ERYTHEMA #> 5    NA                                   ERYTHEMA       LOCALIZED ERYTHEMA #> 6    NA       ATRIOVENTRICULAR BLOCK SECOND DEGREE   AV BLOCK SECOND DEGREE #>   AELLTCD                              AEDECOD AEPTCD    AEHLT AEHLTCD #> 1      NA            APPLICATION SITE ERYTHEMA     NA HLT_0617      NA #> 2      NA            APPLICATION SITE PRURITUS     NA HLT_0317      NA #> 3      NA                            DIARRHOEA     NA HLT_0148      NA #> 4      NA                             ERYTHEMA     NA HLT_0284      NA #> 5      NA                             ERYTHEMA     NA HLT_0284      NA #> 6      NA ATRIOVENTRICULAR BLOCK SECOND DEGREE     NA HLT_0415      NA #>      AEHLGT AEHLGTCD                                             AEBODSYS #> 1 HLGT_0152       NA GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS #> 2 HLGT_0338       NA GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS #> 3 HLGT_0588       NA                           GASTROINTESTINAL DISORDERS #> 4 HLGT_0192       NA               SKIN AND SUBCUTANEOUS TISSUE DISORDERS #> 5 HLGT_0192       NA               SKIN AND SUBCUTANEOUS TISSUE DISORDERS #> 6 HLGT_0086       NA                                    CARDIAC DISORDERS #>                                                  AESOC AESOCCD    AESEV AESER #> 1 GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS      NA     MILD     N #> 2 GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS      NA     MILD     N #> 3                           GASTROINTESTINAL DISORDERS      NA     MILD     N #> 4               SKIN AND SUBCUTANEOUS TISSUE DISORDERS      NA     MILD     N #> 5               SKIN AND SUBCUTANEOUS TISSUE DISORDERS      NA MODERATE     N #> 6                                    CARDIAC DISORDERS      NA     MILD     N #>   AESCAN AESCONG AESDISAB AESDTH AESHOSP AESLIFE AESOD    AEREL AEACN #> 1      N       N        N      N       N       N     N PROBABLE       #> 2      N       N        N      N       N       N     N PROBABLE       #> 3      N       N        N      N       N       N     N   REMOTE       #> 4      N       N        N      N       N       N     N POSSIBLE       #> 5      N       N        N      N       N       N     N PROBABLE       #> 6      N       N        N      N       N       N     N POSSIBLE       #>                        AEOUT AESEQ TRTEMFL AOCCFL AOCCSFL AOCCPFL AOCC02FL #> 1 NOT RECOVERED/NOT RESOLVED     1       Y      Y       Y       Y          #> 2 NOT RECOVERED/NOT RESOLVED     2       Y                      Y          #> 3         RECOVERED/RESOLVED     3       Y              Y       Y          #> 4 NOT RECOVERED/NOT RESOLVED     1       Y      Y       Y       Y          #> 5 NOT RECOVERED/NOT RESOLVED     2       Y                                 #> 6 NOT RECOVERED/NOT RESOLVED     3       Y              Y       Y          #>   AOCC03FL AOCC04FL             CQ01NAM AOCC01FL #> 1                   DERMATOLOGIC EVENTS        Y #> 2                   DERMATOLOGIC EVENTS          #> 3                                                #> 4                   DERMATOLOGIC EVENTS        Y #> 5                   DERMATOLOGIC EVENTS          #> 6                                                assign_label(   r2rtf::r2rtf_adae,   var = \"USUBJID\",   label = \"Unique subject identifier\" ) |> head() #>        STUDYID SITEID     USUBJID    TRTA TRTAN AGE AGEGR1 AGEGR1N  RACE RACEN #> 1 CDISCPILOT01    701 01-701-1015 Placebo     0  63    <65       1 WHITE     1 #> 2 CDISCPILOT01    701 01-701-1015 Placebo     0  63    <65       1 WHITE     1 #> 3 CDISCPILOT01    701 01-701-1015 Placebo     0  63    <65       1 WHITE     1 #> 4 CDISCPILOT01    701 01-701-1023 Placebo     0  64    <65       1 WHITE     1 #> 5 CDISCPILOT01    701 01-701-1023 Placebo     0  64    <65       1 WHITE     1 #> 6 CDISCPILOT01    701 01-701-1023 Placebo     0  64    <65       1 WHITE     1 #>   SEX SAFFL     TRTSDT     TRTEDT      ASTDT ASTDTF ASTDY      AENDT AENDY #> 1   F     Y 2014-01-02 2014-07-02 2014-01-03            2       <NA>    NA #> 2   F     Y 2014-01-02 2014-07-02 2014-01-03            2       <NA>    NA #> 3   F     Y 2014-01-02 2014-07-02 2014-01-09            8 2014-01-11    10 #> 4   M     Y 2012-08-05 2012-09-01 2012-08-07            3 2012-08-30    26 #> 5   M     Y 2012-08-05 2012-09-01 2012-08-07            3       <NA>    NA #> 6   M     Y 2012-08-05 2012-09-01 2012-08-26           22       <NA>    NA #>   ADURN ADURU                               AETERM                    AELLT #> 1    NA                  APPLICATION SITE ERYTHEMA APPLICATION SITE REDNESS #> 2    NA                  APPLICATION SITE PRURITUS APPLICATION SITE ITCHING #> 3     3   DAY                            DIARRHOEA                 DIARRHEA #> 4    24   DAY                             ERYTHEMA                 ERYTHEMA #> 5    NA                                   ERYTHEMA       LOCALIZED ERYTHEMA #> 6    NA       ATRIOVENTRICULAR BLOCK SECOND DEGREE   AV BLOCK SECOND DEGREE #>   AELLTCD                              AEDECOD AEPTCD    AEHLT AEHLTCD #> 1      NA            APPLICATION SITE ERYTHEMA     NA HLT_0617      NA #> 2      NA            APPLICATION SITE PRURITUS     NA HLT_0317      NA #> 3      NA                            DIARRHOEA     NA HLT_0148      NA #> 4      NA                             ERYTHEMA     NA HLT_0284      NA #> 5      NA                             ERYTHEMA     NA HLT_0284      NA #> 6      NA ATRIOVENTRICULAR BLOCK SECOND DEGREE     NA HLT_0415      NA #>      AEHLGT AEHLGTCD                                             AEBODSYS #> 1 HLGT_0152       NA GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS #> 2 HLGT_0338       NA GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS #> 3 HLGT_0588       NA                           GASTROINTESTINAL DISORDERS #> 4 HLGT_0192       NA               SKIN AND SUBCUTANEOUS TISSUE DISORDERS #> 5 HLGT_0192       NA               SKIN AND SUBCUTANEOUS TISSUE DISORDERS #> 6 HLGT_0086       NA                                    CARDIAC DISORDERS #>                                                  AESOC AESOCCD    AESEV AESER #> 1 GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS      NA     MILD     N #> 2 GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS      NA     MILD     N #> 3                           GASTROINTESTINAL DISORDERS      NA     MILD     N #> 4               SKIN AND SUBCUTANEOUS TISSUE DISORDERS      NA     MILD     N #> 5               SKIN AND SUBCUTANEOUS TISSUE DISORDERS      NA MODERATE     N #> 6                                    CARDIAC DISORDERS      NA     MILD     N #>   AESCAN AESCONG AESDISAB AESDTH AESHOSP AESLIFE AESOD    AEREL AEACN #> 1      N       N        N      N       N       N     N PROBABLE       #> 2      N       N        N      N       N       N     N PROBABLE       #> 3      N       N        N      N       N       N     N   REMOTE       #> 4      N       N        N      N       N       N     N POSSIBLE       #> 5      N       N        N      N       N       N     N PROBABLE       #> 6      N       N        N      N       N       N     N POSSIBLE       #>                        AEOUT AESEQ TRTEMFL AOCCFL AOCCSFL AOCCPFL AOCC02FL #> 1 NOT RECOVERED/NOT RESOLVED     1       Y      Y       Y       Y          #> 2 NOT RECOVERED/NOT RESOLVED     2       Y                      Y          #> 3         RECOVERED/RESOLVED     3       Y              Y       Y          #> 4 NOT RECOVERED/NOT RESOLVED     1       Y      Y       Y       Y          #> 5 NOT RECOVERED/NOT RESOLVED     2       Y                                 #> 6 NOT RECOVERED/NOT RESOLVED     3       Y              Y       Y          #>   AOCC03FL AOCC04FL             CQ01NAM AOCC01FL #> 1                   DERMATOLOGIC EVENTS        Y #> 2                   DERMATOLOGIC EVENTS          #> 3                                                #> 4                   DERMATOLOGIC EVENTS        Y #> 5                   DERMATOLOGIC EVENTS          #> 6"},{"path":"https://merck.github.io/metalite/reference/collect_adam_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect adam_mapping from meta_adam by name — collect_adam_mapping","title":"Collect adam_mapping from meta_adam by name — collect_adam_mapping","text":"Collect adam_mapping meta_adam name","code":""},{"path":"https://merck.github.io/metalite/reference/collect_adam_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect adam_mapping from meta_adam by name — collect_adam_mapping","text":"","code":"collect_adam_mapping(meta, name)"},{"path":"https://merck.github.io/metalite/reference/collect_adam_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect adam_mapping from meta_adam by name — collect_adam_mapping","text":"meta meta_adam object. name keyword value.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_adam_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect adam_mapping from meta_adam by name — collect_adam_mapping","text":"adam_mapping class object containing definition search variable name.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_adam_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect adam_mapping from meta_adam by name — collect_adam_mapping","text":"","code":"meta <- meta_example() collect_adam_mapping(meta, \"apat\") #> ADaM mapping:  #> * `name`      -> \"apat\" #> * `id`        -> \"USUBJID\" #> * `group`     -> \"TRTA\" #> * `var`       -> NULL #> * `subset`    -> SAFFL == \"Y\" #> * `label`     -> \"All Participants as Treated\" #> * `.location` -> \"population\""},{"path":"https://merck.github.io/metalite/reference/collect_dataname.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect specification for dataset name — collect_dataname","title":"Collect specification for dataset name — collect_dataname","text":"Collect specification dataset name","code":""},{"path":"https://merck.github.io/metalite/reference/collect_dataname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect specification for dataset name — collect_dataname","text":"","code":"collect_dataname(meta)"},{"path":"https://merck.github.io/metalite/reference/collect_dataname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect specification for dataset name — collect_dataname","text":"meta meta_adam object.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_dataname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect specification for dataset name — collect_dataname","text":"vector character strings containing name population/observation.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_dataname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect specification for dataset name — collect_dataname","text":"","code":"meta <- meta_example() collect_dataname(meta) #>  population observation  #>      \"adsl\"      \"adae\""},{"path":"https://merck.github.io/metalite/reference/collect_n_subject.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect number of subjects and its subset condition — collect_n_subject","title":"Collect number of subjects and its subset condition — collect_n_subject","text":"Collect number subjects subset condition","code":""},{"path":"https://merck.github.io/metalite/reference/collect_n_subject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect number of subjects and its subset condition — collect_n_subject","text":"","code":"collect_n_subject(   meta,   population,   parameter,   listing = FALSE,   histogram = FALSE,   var_listing = NULL,   remove_blank_group = FALSE,   type = \"Subjects\",   use_na = c(\"ifany\", \"no\", \"always\"),   display_total = TRUE )"},{"path":"https://merck.github.io/metalite/reference/collect_n_subject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect number of subjects and its subset condition — collect_n_subject","text":"meta meta_adam object. population character value population term name. term name used key link information. parameter character value parameter term name. term name used key link information. listing logical value display drill listing per row. histogram logical value display histogram group. var_listing character vector additional variables included listing. remove_blank_group logical value remove group missing value parameter. type character value control title name, e.g., Subjects Records. use_na character value whether include NA values table. See useNA argument base::table() details. display_total logical value display total column.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_n_subject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect number of subjects and its subset condition — collect_n_subject","text":"list containing number subjects subset condition.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_n_subject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect number of subjects and its subset condition — collect_n_subject","text":"","code":"suppressWarnings(   meta <- meta_example() |>     define_parameter(name = \"sex\", var = \"SEX\", label = \"Sex\") ) collect_n_subject(meta, \"apat\", \"sex\") #> $table #>                 name     Placebo Xanomeline Low Dose Xanomeline High Dose #> 1 Number of Subjects          86                  84                   84 #> 2                Sex        <NA>                <NA>                 <NA> #> 3 Subjects with Data          86                  84                   84 #> 4                  F 53 ( 61.6%)         50 ( 59.5%)          40 ( 47.6%) #> 5                  M 33 ( 38.4%)         34 ( 40.5%)          44 ( 52.4%) #>          Total #> 1          254 #> 2         <NA> #> 3          254 #> 4 143 ( 56.3%) #> 5 111 ( 43.7%) #>  #> $n #>                 name Placebo Xanomeline Low Dose Xanomeline High Dose Total #> 1 Number of Subjects      86                  84                   84   254 #>  #> $subset #>                 name                                           Placebo #> 1 Number of Subjects           TRUE & TRTA == 'Placebo' & SAFFL == 'Y' #> 2 Subjects with Data (! is.na(SEX)) & TRTA == 'Placebo' & SAFFL == 'Y' #> 3            Missing     is.na(SEX) & TRTA == 'Placebo' & SAFFL == 'Y' #> 4                  F     SEX == 'F' & TRTA == 'Placebo' & SAFFL == 'Y' #> 5                  M     SEX == 'M' & TRTA == 'Placebo' & SAFFL == 'Y' #>                                             Xanomeline Low Dose #> 1           TRUE & TRTA == 'Xanomeline Low Dose' & SAFFL == 'Y' #> 2 (! is.na(SEX)) & TRTA == 'Xanomeline Low Dose' & SAFFL == 'Y' #> 3     is.na(SEX) & TRTA == 'Xanomeline Low Dose' & SAFFL == 'Y' #> 4     SEX == 'F' & TRTA == 'Xanomeline Low Dose' & SAFFL == 'Y' #> 5     SEX == 'M' & TRTA == 'Xanomeline Low Dose' & SAFFL == 'Y' #>                                             Xanomeline High Dose #> 1           TRUE & TRTA == 'Xanomeline High Dose' & SAFFL == 'Y' #> 2 (! is.na(SEX)) & TRTA == 'Xanomeline High Dose' & SAFFL == 'Y' #> 3     is.na(SEX) & TRTA == 'Xanomeline High Dose' & SAFFL == 'Y' #> 4     SEX == 'F' & TRTA == 'Xanomeline High Dose' & SAFFL == 'Y' #> 5     SEX == 'M' & TRTA == 'Xanomeline High Dose' & SAFFL == 'Y' #>  #> $listing #> NULL #>  #> $histogram #> NULL #>"},{"path":"https://merck.github.io/metalite/reference/collect_observation_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect observation record index from observation dataset — collect_observation_index","title":"Collect observation record index from observation dataset — collect_observation_index","text":"Collect observation record index observation dataset","code":""},{"path":"https://merck.github.io/metalite/reference/collect_observation_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect observation record index from observation dataset — collect_observation_index","text":"","code":"collect_observation_index(meta, population, observation, parameter)"},{"path":"https://merck.github.io/metalite/reference/collect_observation_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect observation record index from observation dataset — collect_observation_index","text":"meta meta_adam object. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_observation_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect observation record index from observation dataset — collect_observation_index","text":"vector patient index within observation group.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_observation_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect observation record index from observation dataset — collect_observation_index","text":"","code":"meta <- meta_example() collect_observation_index(meta, \"apat\", \"wk12\", \"ser\") #> [1]  689 1131 1173"},{"path":"https://merck.github.io/metalite/reference/collect_observation_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect observation record from observation dataset — collect_observation_record","title":"Collect observation record from observation dataset — collect_observation_record","text":"key variables used id, group, subset displayed default.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_observation_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect observation record from observation dataset — collect_observation_record","text":"","code":"collect_observation_record(   meta,   population,   observation,   parameter,   var = NULL )"},{"path":"https://merck.github.io/metalite/reference/collect_observation_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect observation record from observation dataset — collect_observation_record","text":"meta meta_adam object. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information. var character vector additional variables displayed output.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_observation_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect observation record from observation dataset — collect_observation_record","text":"data frame observation dataset.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_observation_record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect observation record from observation dataset — collect_observation_record","text":"","code":"meta <- meta_example() collect_observation_record(meta, \"apat\", \"wk12\", \"ser\") #>          USUBJID                 TRTA #> 689  01-709-1424 Xanomeline High Dose #> 1131 01-718-1170  Xanomeline Low Dose #> 1173 01-718-1371 Xanomeline High Dose #>                                             AEDECOD SAFFL AESER #> 689                                         SYNCOPE     Y     Y #> 1131                                        SYNCOPE     Y     Y #> 1173 PARTIAL SEIZURES WITH SECONDARY GENERALISATION     Y     Y collect_observation_record(meta, \"apat\", \"wk12\", \"ser\", var = \"AEDECOD\") #>          USUBJID                 TRTA #> 689  01-709-1424 Xanomeline High Dose #> 1131 01-718-1170  Xanomeline Low Dose #> 1173 01-718-1371 Xanomeline High Dose #>                                             AEDECOD SAFFL AESER #> 689                                         SYNCOPE     Y     Y #> 1131                                        SYNCOPE     Y     Y #> 1173 PARTIAL SEIZURES WITH SECONDARY GENERALISATION     Y     Y"},{"path":"https://merck.github.io/metalite/reference/collect_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect specification for population definition — collect_population","title":"Collect specification for population definition — collect_population","text":"Collect specification population definition","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect specification for population definition — collect_population","text":"","code":"collect_population(meta, population, observation = NULL, parameter = NULL)"},{"path":"https://merck.github.io/metalite/reference/collect_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect specification for population definition — collect_population","text":"meta meta_adam object. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect specification for population definition — collect_population","text":"list covering filter population, observation (given) parameter (given).","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect specification for population definition — collect_population","text":"","code":"meta <- meta_example() collect_population(meta, \"apat\") #> $population #> [1] \"SAFFL == 'Y'\" #>  collect_population(meta, \"apat\", \"wk12\") #> $population #> [1] \"SAFFL == 'Y'\" #>  #> $observation #> [1] \"SAFFL == 'Y'\" #>  collect_population(meta, \"apat\", \"wk12\", \"ser\") #> $population #> [1] \"SAFFL == 'Y'\" #>  #> $observation #> [1] \"SAFFL == 'Y'\" #>  #> $parameter #> [1] \"AESER == 'Y'\" #>"},{"path":"https://merck.github.io/metalite/reference/collect_population_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect subject identifier information from population dataset — collect_population_id","title":"Collect subject identifier information from population dataset — collect_population_id","text":"Collect subject identifier information population dataset","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect subject identifier information from population dataset — collect_population_id","text":"","code":"collect_population_id(meta, population)"},{"path":"https://merck.github.io/metalite/reference/collect_population_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect subject identifier information from population dataset — collect_population_id","text":"meta meta_adam object. population character value population term name. term name used key link information.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect subject identifier information from population dataset — collect_population_id","text":"vector patient ID within population group.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect subject identifier information from population dataset — collect_population_id","text":"","code":"meta <- meta_example() head(collect_population_id(meta, \"apat\")) #> [1] \"01-701-1015\" \"01-701-1023\" \"01-701-1028\" \"01-701-1033\" \"01-701-1034\" #> [6] \"01-701-1047\""},{"path":"https://merck.github.io/metalite/reference/collect_population_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect population record index from population dataset — collect_population_index","title":"Collect population record index from population dataset — collect_population_index","text":"Collect population record index population dataset","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect population record index from population dataset — collect_population_index","text":"","code":"collect_population_index(meta, population)"},{"path":"https://merck.github.io/metalite/reference/collect_population_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect population record index from population dataset — collect_population_index","text":"meta meta_adam object. population character value population term name. term name used key link information.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect population record index from population dataset — collect_population_index","text":"vector patient index within population group.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect population record index from population dataset — collect_population_index","text":"","code":"meta <- meta_example() head(collect_population_index(meta, \"apat\")) #> [1] 1 2 3 4 5 6"},{"path":"https://merck.github.io/metalite/reference/collect_population_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect population record from population dataset — collect_population_record","title":"Collect population record from population dataset — collect_population_record","text":"key variables used id, group, subset displayed default.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect population record from population dataset — collect_population_record","text":"","code":"collect_population_record(meta, population, var = NULL)"},{"path":"https://merck.github.io/metalite/reference/collect_population_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect population record from population dataset — collect_population_record","text":"meta meta_adam object. population character value population term name. term name used key link information. var character vector additional variables displayed output.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect population record from population dataset — collect_population_record","text":"data frame containing variables population dataset.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_population_record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect population record from population dataset — collect_population_record","text":"","code":"meta <- meta_example() head(collect_population_record(meta, \"apat\")) #>       USUBJID                 TRTA SAFFL #> 1 01-701-1015              Placebo     Y #> 2 01-701-1023              Placebo     Y #> 3 01-701-1028 Xanomeline High Dose     Y #> 4 01-701-1033  Xanomeline Low Dose     Y #> 5 01-701-1034 Xanomeline High Dose     Y #> 6 01-701-1047              Placebo     Y head(collect_population_record(meta, \"apat\", var = \"AGE\")) #>       USUBJID                 TRTA SAFFL AGE #> 1 01-701-1015              Placebo     Y  63 #> 2 01-701-1023              Placebo     Y  64 #> 3 01-701-1028 Xanomeline High Dose     Y  71 #> 4 01-701-1033  Xanomeline Low Dose     Y  74 #> 5 01-701-1034 Xanomeline High Dose     Y  77 #> 6 01-701-1047              Placebo     Y  85"},{"path":"https://merck.github.io/metalite/reference/collect_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect specification for title — collect_title","title":"Collect specification for title — collect_title","text":"Collect specification title","code":""},{"path":"https://merck.github.io/metalite/reference/collect_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect specification for title — collect_title","text":"","code":"collect_title(   meta,   population,   observation,   parameter,   analysis,   title_order = c(\"analysis\", \"observation\", \"population\") )"},{"path":"https://merck.github.io/metalite/reference/collect_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect specification for title — collect_title","text":"meta meta_adam object. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information. analysis character value analysis term name. term name used key link information. title_order character vector define order title component.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect specification for title — collect_title","text":"vector strings compose table captions.","code":""},{"path":"https://merck.github.io/metalite/reference/collect_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect specification for title — collect_title","text":"","code":"meta <- meta_example() collect_title(meta, \"apat\", \"wk12\", \"ser\", \"ae_summary\") #> [1] \"Summary of Adverse Events\"   \"Weeks 0 to 12\"               #> [3] \"All Participants as Treated\" collect_title(meta, \"apat\", \"wk12\", \"ser\", \"ae_specific\") #> [1] \"Participants With Serious Adverse Events\" #> [2] \"Weeks 0 to 12\"                            #> [3] \"All Participants as Treated\""},{"path":"https://merck.github.io/metalite/reference/default_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply default values to ADaM mappings — default_apply","title":"Apply default values to ADaM mappings — default_apply","text":"Apply default values ADaM mappings","code":""},{"path":"https://merck.github.io/metalite/reference/default_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply default values to ADaM mappings — default_apply","text":"","code":"default_apply(x)"},{"path":"https://merck.github.io/metalite/reference/default_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply default values to ADaM mappings — default_apply","text":"x adam_mapping object.","code":""},{"path":"https://merck.github.io/metalite/reference/default_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply default values to ADaM mappings — default_apply","text":"Similar input, missing values updated default values.","code":""},{"path":"https://merck.github.io/metalite/reference/default_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply default values to ADaM mappings — default_apply","text":"","code":"default_apply(adam_mapping(name = \"apat\")) #> ADaM mapping:  #> * `name`   -> \"apat\" #> * `id`     -> \"USUBJID\" #> * `group`  -> NULL #> * `var`    -> NULL #> * `subset` -> NULL #> * `label`  -> \"All Participants as Treated\""},{"path":"https://merck.github.io/metalite/reference/define_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Define analysis function meta information for ADaM dataset — define_analysis","title":"Define analysis function meta information for ADaM dataset — define_analysis","text":"Define analysis function meta information ADaM dataset","code":""},{"path":"https://merck.github.io/metalite/reference/define_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define analysis function meta information for ADaM dataset — define_analysis","text":"","code":"define_analysis(meta, name, ...)"},{"path":"https://merck.github.io/metalite/reference/define_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define analysis function meta information for ADaM dataset — define_analysis","text":"meta meta_adam object. name character value term name. term name used key link information. ... Additional variables.","code":""},{"path":"https://merck.github.io/metalite/reference/define_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define analysis function meta information for ADaM dataset — define_analysis","text":"metadata object analysis details defined.","code":""},{"path":"https://merck.github.io/metalite/reference/define_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define analysis function meta information for ADaM dataset — define_analysis","text":"","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" )  meta_adam(   population = r2rtf::r2rtf_adsl,   observation = r2rtf::r2rtf_adae ) |>   define_plan(plan = plan) |>   define_analysis(     name = \"ae_summary\",     title = \"Summary of Adverse Events\"   ) #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 2 plans  #>  #>  #>   Analysis function: #>           name                          label #> 1 'ae_summary' 'Table: adverse event summary' #>"},{"path":"https://merck.github.io/metalite/reference/define_observation.html","id":null,"dir":"Reference","previous_headings":"","what":"Define analysis observation meta information for ADaM dataset — define_observation","title":"Define analysis observation meta information for ADaM dataset — define_observation","text":"Define analysis observation meta information ADaM dataset","code":""},{"path":"https://merck.github.io/metalite/reference/define_observation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define analysis observation meta information for ADaM dataset — define_observation","text":"","code":"define_observation(   meta,   name,   id = \"USUBJID\",   group = NULL,   var = NULL,   subset = NULL,   label = NULL,   ... )"},{"path":"https://merck.github.io/metalite/reference/define_observation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define analysis observation meta information for ADaM dataset — define_observation","text":"meta meta_adam object. name character value term name. term name used key link information. id character value subject identifier variable name ADaM dataset. group character vector group variable names ADaM dataset. var character vector useful variable names ADaM dataset. subset expression identify analysis records. See base::subset(). label character value analysis label. ... Additional variables.","code":""},{"path":"https://merck.github.io/metalite/reference/define_observation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define analysis observation meta information for ADaM dataset — define_observation","text":"metadata object observation defined.","code":""},{"path":"https://merck.github.io/metalite/reference/define_observation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define analysis observation meta information for ADaM dataset — define_observation","text":"","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" )  meta_adam(   population = r2rtf::r2rtf_adsl,   observation = r2rtf::r2rtf_adae ) |>   define_plan(plan = plan) |>   define_observation(     name = \"wk12\",     group = \"TRTA\",     subset = SAFFL == \"Y\",     label = \"Weeks 0 to 12\"   ) #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 2 plans  #>  #>  #>   Analysis observation type: #>     name        id  group var       subset           label #> 1 'wk12' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'Weeks 0 to 12' #>  #>"},{"path":"https://merck.github.io/metalite/reference/define_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Define analysis parameter meta information for ADaM dataset — define_parameter","title":"Define analysis parameter meta information for ADaM dataset — define_parameter","text":"Define analysis parameter meta information ADaM dataset","code":""},{"path":"https://merck.github.io/metalite/reference/define_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define analysis parameter meta information for ADaM dataset — define_parameter","text":"","code":"define_parameter(meta, name, subset = NULL, ...)"},{"path":"https://merck.github.io/metalite/reference/define_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define analysis parameter meta information for ADaM dataset — define_parameter","text":"meta meta_adam object. name character value term name. term name used key link information. subset expression identify analysis records. See base::subset(). ... Additional variables.","code":""},{"path":"https://merck.github.io/metalite/reference/define_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define analysis parameter meta information for ADaM dataset — define_parameter","text":"metadata object parameters defined.","code":""},{"path":"https://merck.github.io/metalite/reference/define_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define analysis parameter meta information for ADaM dataset — define_parameter","text":"","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" )  meta_adam(   population = r2rtf::r2rtf_adsl,   observation = r2rtf::r2rtf_adae ) |>   define_plan(plan = plan) |>   define_parameter(     name = \"rel\",     subset = AEREL %in% c(\"POSSIBLE\", \"PROBABLE\")   ) #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 2 plans  #>  #>  #>   Analysis parameter type: #>    name                         label                               subset #> 1 'rel' 'drug-related adverse events' AEREL %in% c('POSSIBLE', 'PROBABLE') #>  #>"},{"path":"https://merck.github.io/metalite/reference/define_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Define analysis plan meta information for ADaM dataset — define_plan","title":"Define analysis plan meta information for ADaM dataset — define_plan","text":"Define analysis plan meta information ADaM dataset","code":""},{"path":"https://merck.github.io/metalite/reference/define_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define analysis plan meta information for ADaM dataset — define_plan","text":"","code":"define_plan(meta, plan)"},{"path":"https://merck.github.io/metalite/reference/define_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define analysis plan meta information for ADaM dataset — define_plan","text":"meta meta_adam object. plan data frame analysis plan.","code":""},{"path":"https://merck.github.io/metalite/reference/define_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define analysis plan meta information for ADaM dataset — define_plan","text":"metadata object plans defined.","code":""},{"path":"https://merck.github.io/metalite/reference/define_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define analysis plan meta information for ADaM dataset — define_plan","text":"","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" )  meta_adam(   population = r2rtf::r2rtf_adsl,   observation = r2rtf::r2rtf_adae ) |>   define_plan(plan) #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 2 plans  #>  #>"},{"path":"https://merck.github.io/metalite/reference/define_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Define analysis population meta information for ADaM dataset — define_population","title":"Define analysis population meta information for ADaM dataset — define_population","text":"Define analysis population meta information ADaM dataset","code":""},{"path":"https://merck.github.io/metalite/reference/define_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define analysis population meta information for ADaM dataset — define_population","text":"","code":"define_population(   meta,   name,   id = \"USUBJID\",   group = NULL,   var = NULL,   subset = NULL,   label = NULL,   ... )"},{"path":"https://merck.github.io/metalite/reference/define_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define analysis population meta information for ADaM dataset — define_population","text":"meta meta_adam object. name character value term name. term name used key link information. id character value subject identifier variable name ADaM dataset. group character vector group variable names ADaM dataset. var character vector useful variable names ADaM dataset. subset expression identify analysis records. See base::subset(). label character value analysis label. ... Additional variables.","code":""},{"path":"https://merck.github.io/metalite/reference/define_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define analysis population meta information for ADaM dataset — define_population","text":"metadata object population defined.","code":""},{"path":"https://merck.github.io/metalite/reference/define_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define analysis population meta information for ADaM dataset — define_population","text":"","code":"plan <- plan(   analysis = \"ae_summary\", population = \"apat\",   observation = c(\"wk12\", \"wk24\"), parameter = \"any;rel;ser\" )  meta_adam(   population = r2rtf::r2rtf_adsl,   observation = r2rtf::r2rtf_adae ) |>   define_plan(plan) |>   define_population(name = \"apat\") #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 2 plans  #>  #>  #>   Analysis population type: #>     name        id group var subset                         label #> 1 'apat' 'USUBJID'                  'All Participants as Treated' #>  #>"},{"path":"https://merck.github.io/metalite/reference/get_label.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to get the labels of data frame columns — get_label","title":"A function to get the labels of data frame columns — get_label","text":"function get labels data frame columns","code":""},{"path":"https://merck.github.io/metalite/reference/get_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to get the labels of data frame columns — get_label","text":"","code":"get_label(data)"},{"path":"https://merck.github.io/metalite/reference/get_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to get the labels of data frame columns — get_label","text":"data data frame.","code":""},{"path":"https://merck.github.io/metalite/reference/get_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to get the labels of data frame columns — get_label","text":"Labels input data frame.","code":""},{"path":"https://merck.github.io/metalite/reference/get_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to get the labels of data frame columns — get_label","text":"","code":"get_label(r2rtf::r2rtf_adae) #>                                   STUDYID  #>                        \"Study Identifier\"  #>                                    SITEID  #>                   \"Study Site Identifier\"  #>                                   USUBJID  #>               \"Unique Subject Identifier\"  #>                                      TRTA  #>                        \"Actual Treatment\"  #>                                     TRTAN  #>                    \"Actual Treatment (N)\"  #>                                       AGE  #>                                     \"Age\"  #>                                    AGEGR1  #>                      \"Pooled Age Group 1\"  #>                                   AGEGR1N  #>                  \"Pooled Age Group 1 (N)\"  #>                                      RACE  #>                                    \"Race\"  #>                                     RACEN  #>                                \"Race (N)\"  #>                                       SEX  #>                                     \"Sex\"  #>                                     SAFFL  #>                  \"Safety Population Flag\"  #>                                    TRTSDT  #>     \"Date of First Exposure to Treatment\"  #>                                    TRTEDT  #>      \"Date of Last Exposure to Treatment\"  #>                                     ASTDT  #>                     \"Analysis Start Date\"  #>                                    ASTDTF  #>     \"Analysis Start Date Imputation Flag\"  #>                                     ASTDY  #>             \"Analysis Start Relative Day\"  #>                                     AENDT  #>                       \"Analysis End Date\"  #>                                     AENDY  #>               \"Analysis End Relative Day\"  #>                                     ADURN  #>                         \"AE Duration (N)\"  #>                                     ADURU  #>                       \"AE Duration Units\"  #>                                    AETERM  #>     \"Reported Term for the Adverse Event\"  #>                                     AELLT  #>                       \"Lowest Level Term\"  #>                                   AELLTCD  #>                  \"Lowest Level Term Code\"  #>                                   AEDECOD  #>                 \"Dictionary-Derived Term\"  #>                                    AEPTCD  #>                     \"Preferred Term Code\"  #>                                     AEHLT  #>                         \"High Level Term\"  #>                                   AEHLTCD  #>                    \"High Level Term Code\"  #>                                    AEHLGT  #>                   \"High Level Group Term\"  #>                                  AEHLGTCD  #>              \"High Level Group Term Code\"  #>                                  AEBODSYS  #>              \"Body System or Organ Class\"  #>                                     AESOC  #>              \"Primary System Organ Class\"  #>                                   AESOCCD  #>         \"Primary System Organ Class Code\"  #>                                     AESEV  #>                      \"Severity/Intensity\"  #>                                     AESER  #>                           \"Serious Event\"  #>                                    AESCAN  #>                         \"Involves Cancer\"  #>                                   AESCONG  #>      \"Congenital Anomaly or Birth Defect\"  #>                                  AESDISAB  #> \"Persist or Signif Disability/Incapacity\"  #>                                    AESDTH  #>                        \"Results in Death\"  #>                                   AESHOSP  #>    \"Requires or Prolongs Hospitalization\"  #>                                   AESLIFE  #>                     \"Is Life Threatening\"  #>                                     AESOD  #>                  \"Occurred with Overdose\"  #>                                     AEREL  #>                               \"Causality\"  #>                                     AEACN  #>       \"Action Taken with Study Treatment\"  #>                                     AEOUT  #>                \"Outcome of Adverse Event\"  #>                                     AESEQ  #>                         \"Sequence Number\"  #>                                   TRTEMFL  #>        \"Treatment Emergent Analysis Flag\"  #>                                    AOCCFL  #>           \"1st Occurrence of Any AE Flag\"  #>                                   AOCCSFL  #>              \"1st Occurrence of SOC Flag\"  #>                                   AOCCPFL  #>   \"1st Occurrence of Preferred Term Flag\"  #>                                  AOCC02FL  #>      \"1st Occurrence 02 Flag for Serious\"  #>                                  AOCC03FL  #>  \"1st Occurrence 03 Flag for Serious SOC\"  #>                                  AOCC04FL  #>   \"1st Occurrence 04 Flag for Serious PT\"  #>                                   CQ01NAM  #>                \"Customized Query 01 Name\"  #>                                  AOCC01FL  #>         \"1st Occurrence 01 Flag for CQ01\""},{"path":"https://merck.github.io/metalite/reference/meta_adam.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a metadata representation for ADaM data analysis — meta_adam","title":"Create a metadata representation for ADaM data analysis — meta_adam","text":"Create metadata representation ADaM data analysis","code":""},{"path":"https://merck.github.io/metalite/reference/meta_adam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a metadata representation for ADaM data analysis — meta_adam","text":"","code":"meta_adam(observation, population = observation)"},{"path":"https://merck.github.io/metalite/reference/meta_adam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a metadata representation for ADaM data analysis — meta_adam","text":"observation data frame observation level data. population data frame population level data. Default observation.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_adam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a metadata representation for ADaM data analysis — meta_adam","text":"initialized metadata object observation population defined.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_adam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a metadata representation for ADaM data analysis — meta_adam","text":"","code":"meta_adam(observation = r2rtf::r2rtf_adae, population = r2rtf::r2rtf_adae) #> ADaM metadata:  #>    .$data_population \tPopulation data with 1191 subjects  #>    .$data_observation \tObservation data with 1191 records  #>  #>"},{"path":"https://merck.github.io/metalite/reference/meta_add_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Add duplicate data to enable a total group — meta_add_total","title":"Add duplicate data to enable a total group — meta_add_total","text":"Add duplicate data enable total group","code":""},{"path":"https://merck.github.io/metalite/reference/meta_add_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add duplicate data to enable a total group — meta_add_total","text":"","code":"meta_add_total(meta, total = \"Total\")"},{"path":"https://merck.github.io/metalite/reference/meta_add_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add duplicate data to enable a total group — meta_add_total","text":"meta metalite object. total character value total group name.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_add_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add duplicate data to enable a total group — meta_add_total","text":"metadata object total group added.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_add_total.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add duplicate data to enable a total group — meta_add_total","text":"","code":"x <- meta_add_total(meta_example()) # A `Total` group is added table(x$data_population$TRTA) #>  #>              Placebo  Xanomeline Low Dose Xanomeline High Dose  #>                   86                   84                   84  #>                Total  #>                  254"},{"path":"https://merck.github.io/metalite/reference/meta_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build complete meta information — meta_build","title":"Build complete meta information — meta_build","text":"Build complete meta information","code":""},{"path":"https://merck.github.io/metalite/reference/meta_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build complete meta information — meta_build","text":"","code":"meta_build(meta)"},{"path":"https://merck.github.io/metalite/reference/meta_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build complete meta information — meta_build","text":"meta meta_adam object.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build complete meta information — meta_build","text":"composed metadata object.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build complete meta information — meta_build","text":"","code":"meta_adam(   observation = r2rtf::r2rtf_adae,   population = r2rtf::r2rtf_adsl ) |>   # define analysis plan   define_plan(     plan(       analysis = \"ae_summary\",       population = \"apat\",       observation = c(\"wk12\"),       parameter = \"any;rel\"     )   ) |>   # define population   define_population(     name = \"apat\",     group = \"TRT01A\",     subset = SAFFL == \"Y\"   ) |>   # define observation   define_observation(     name = \"wk12\",     group = \"TRTA\",     subset = SAFFL == \"Y\",     label = \"Weeks 0 to 12\"   ) |>   # define parameter - rel   define_parameter(     name = \"rel\",     subset = AEREL %in% c(\"POSSIBLE\", \"PROBABLE\")   ) |>   # define analysis   define_parameter(     name = \"rel\",     subset = AEREL %in% c(\"POSSIBLE\", \"PROBABLE\")   ) |>   meta_build() #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 1 plans  #>  #>  #>   Analysis population type: #>     name        id    group var       subset                         label #> 1 'apat' 'USUBJID' 'TRT01A'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>     name        id  group var       subset           label #> 1 'wk12' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'Weeks 0 to 12' #>  #>  #>   Analysis parameter type: #>    name                         label                               subset #> 1 'rel' 'drug-related adverse events' AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2 'any'          'any adverse events'                                      #>  #>  #>   Analysis function: #>           name                          label #> 1 'ae_summary' 'Table: adverse event summary' #>"},{"path":"https://merck.github.io/metalite/reference/meta_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an example meta_adam object — meta_example","title":"Create an example meta_adam object — meta_example","text":"function illustration purposes. r2rtf package required.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an example meta_adam object — meta_example","text":"","code":"meta_example()"},{"path":"https://merck.github.io/metalite/reference/meta_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an example meta_adam object — meta_example","text":"metadata object.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an example meta_adam object — meta_example","text":"","code":"meta_example() #> ADaM metadata:  #>    .$data_population \tPopulation data with 254 subjects  #>    .$data_observation \tObservation data with 1191 records  #>    .$plan \tAnalysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset                         label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>     name        id  group var          subset           label #> 1 'wk12' 'USUBJID' 'TRTA'        SAFFL == 'Y' 'Weeks 0 to 12' #> 2 'wk24' 'USUBJID' 'TRTA'     AOCC01FL == 'Y' 'Weeks 0 to 24' #>  #>  #>   Analysis parameter type: #>      name                                label #> 1   'rel'        'drug-related adverse events' #> 2 'aeosi' 'adverse events of special interest' #> 3   'any'                 'any adverse events' #> 4   'ser'             'serious adverse events' #>                                 subset #> 1 AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2                         AEOSI == 'Y' #> 3                                      #> 4                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                           label #> 1  'ae_summary'  'Table: adverse event summary' #> 2 'ae_specific' 'Table: specific adverse event' #>"},{"path":"https://merck.github.io/metalite/reference/meta_example_exploration.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data exploration meta_adam object — meta_example_exploration","title":"Create a data exploration meta_adam object — meta_example_exploration","text":"Create data exploration meta_adam object","code":""},{"path":"https://merck.github.io/metalite/reference/meta_example_exploration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data exploration meta_adam object — meta_example_exploration","text":"","code":"meta_example_exploration(   data,   group,   name = \"ase\",   subset = NULL,   label = \"All Subjects Enrolled\" )"},{"path":"https://merck.github.io/metalite/reference/meta_example_exploration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data exploration meta_adam object — meta_example_exploration","text":"data data frame. group character vector group variable names ADaM dataset. name character value term name. term name used key link information. subset expression identify analysis records. See base::subset(). label character value analysis label.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_example_exploration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data exploration meta_adam object — meta_example_exploration","text":"metadata object.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_example_exploration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data exploration meta_adam object — meta_example_exploration","text":"","code":"meta <- meta_example_exploration(r2rtf::r2rtf_adsl, group = \"TRT01A\") collect_n_subject(meta, \"ase\", \"AGE\") #> $table #>                 name           Placebo             Total Xanomeline High Dose #> 1 Number of Subjects                86               254                   84 #> 2                Age              <NA>              <NA>                 <NA> #> 3 Subjects with Data                86               254                   84 #> 4          Mean (SD)        75.2 (8.6)        75.1 (8.2)           74.4 (7.9) #> 5  Median [Min, Max] 76.0 [52.0, 89.0] 77.0 [51.0, 89.0]    76.0 [56.0, 88.0] #> 6            Missing        0 (  0.0%)        0 (  0.0%)           0 (  0.0%) #>   Xanomeline Low Dose #> 1                  84 #> 2                <NA> #> 3                  84 #> 4          75.7 (8.3) #> 5   77.5 [51.0, 88.0] #> 6          0 (  0.0%) #>  #> $n #>                 name Placebo Total Xanomeline High Dose Xanomeline Low Dose #> 1 Number of Subjects      86   254                   84                  84 #>  #> $subset #>                 name                                     Placebo #> 1 Number of Subjects           TRUE & TRT01A == 'Placebo' & NULL #> 2 Subjects with Data (! is.na(AGE)) & TRT01A == 'Placebo' & NULL #> 3            Missing     is.na(AGE) & TRT01A == 'Placebo' & NULL #>                                       Xanomeline High Dose #> 1           TRUE & TRT01A == 'Xanomeline High Dose' & NULL #> 2 (! is.na(AGE)) & TRT01A == 'Xanomeline High Dose' & NULL #> 3     is.na(AGE) & TRT01A == 'Xanomeline High Dose' & NULL #>                                       Xanomeline Low Dose #> 1           TRUE & TRT01A == 'Xanomeline Low Dose' & NULL #> 2 (! is.na(AGE)) & TRT01A == 'Xanomeline Low Dose' & NULL #> 3     is.na(AGE) & TRT01A == 'Xanomeline Low Dose' & NULL #>  #> $listing #> NULL #>  #> $histogram #> NULL #>  collect_n_subject(meta, \"ase\", \"SEX\") #> $table #>                 name     Placebo        Total Xanomeline High Dose #> 1 Number of Subjects          86          254                   84 #> 2                Sex        <NA>         <NA>                 <NA> #> 3 Subjects with Data          86          254                   84 #> 4                  F 53 ( 61.6%) 143 ( 56.3%)          40 ( 47.6%) #> 5                  M 33 ( 38.4%) 111 ( 43.7%)          44 ( 52.4%) #>   Xanomeline Low Dose #> 1                  84 #> 2                <NA> #> 3                  84 #> 4         50 ( 59.5%) #> 5         34 ( 40.5%) #>  #> $n #>                 name Placebo Total Xanomeline High Dose Xanomeline Low Dose #> 1 Number of Subjects      86   254                   84                  84 #>  #> $subset #>                 name                                     Placebo #> 1 Number of Subjects           TRUE & TRT01A == 'Placebo' & NULL #> 2 Subjects with Data (! is.na(SEX)) & TRT01A == 'Placebo' & NULL #> 3            Missing     is.na(SEX) & TRT01A == 'Placebo' & NULL #> 4                  F     SEX == 'F' & TRT01A == 'Placebo' & NULL #> 5                  M     SEX == 'M' & TRT01A == 'Placebo' & NULL #>                                       Xanomeline High Dose #> 1           TRUE & TRT01A == 'Xanomeline High Dose' & NULL #> 2 (! is.na(SEX)) & TRT01A == 'Xanomeline High Dose' & NULL #> 3     is.na(SEX) & TRT01A == 'Xanomeline High Dose' & NULL #> 4     SEX == 'F' & TRT01A == 'Xanomeline High Dose' & NULL #> 5     SEX == 'M' & TRT01A == 'Xanomeline High Dose' & NULL #>                                       Xanomeline Low Dose #> 1           TRUE & TRT01A == 'Xanomeline Low Dose' & NULL #> 2 (! is.na(SEX)) & TRT01A == 'Xanomeline Low Dose' & NULL #> 3     is.na(SEX) & TRT01A == 'Xanomeline Low Dose' & NULL #> 4     SEX == 'F' & TRT01A == 'Xanomeline Low Dose' & NULL #> 5     SEX == 'M' & TRT01A == 'Xanomeline Low Dose' & NULL #>  #> $listing #> NULL #>  #> $histogram #> NULL #>"},{"path":"https://merck.github.io/metalite/reference/meta_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute analysis based on the analysis plan — meta_run","title":"Execute analysis based on the analysis plan — meta_run","text":"Execute analysis based analysis plan","code":""},{"path":"https://merck.github.io/metalite/reference/meta_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute analysis based on the analysis plan — meta_run","text":"","code":"meta_run(meta, i = NULL, ...)"},{"path":"https://merck.github.io/metalite/reference/meta_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute analysis based on the analysis plan — meta_run","text":"meta meta_adam object. vector integers indicate -th analysis meta$plan. ... Additional arguments passed [spec_call_program()].","code":""},{"path":"https://merck.github.io/metalite/reference/meta_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute analysis based on the analysis plan — meta_run","text":"Executed analysis based analysis plan.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute analysis based on the analysis plan — meta_run","text":"","code":"meta <- meta_example() ae_summary <- function(...) {   paste(\"results of\", deparse(match.call(), nlines = 1)) } ae_specific <- function(...) {   paste(\"results of\", deparse(match.call(), nlines = 1)) } meta_run(meta) #> Error in ae_summary(meta = meta, population = \"apat\", observation = \"wk12\",     parameter = \"any;rel;ser\"): could not find function \"ae_summary\" meta_run(meta, i = 2) #> Error in ae_summary(meta = meta, population = \"apat\", observation = \"wk24\",     parameter = \"any;rel;ser\"): could not find function \"ae_summary\""},{"path":"https://merck.github.io/metalite/reference/meta_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split metadata into groups — meta_split","title":"Split metadata into groups — meta_split","text":"Split metadata groups","code":""},{"path":"https://merck.github.io/metalite/reference/meta_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split metadata into groups — meta_split","text":"","code":"meta_split(meta, by)"},{"path":"https://merck.github.io/metalite/reference/meta_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split metadata into groups — meta_split","text":"meta meta_adam object. character variable name population level observation level data metadata object.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split metadata into groups — meta_split","text":"metadata object split input variable.","code":""},{"path":"https://merck.github.io/metalite/reference/meta_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split metadata into groups — meta_split","text":"","code":"meta_example() |> meta_split(\"RACE\") #> $`AMERICAN INDIAN OR ALASKA NATIVE` #> ADaM metadata:  #>    .$data_population \tPopulation data with 1 subjects  #>    .$data_observation \tObservation data with 15 records  #>    .$plan \tAnalysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset                         label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>     name        id  group var          subset           label #> 1 'wk12' 'USUBJID' 'TRTA'        SAFFL == 'Y' 'Weeks 0 to 12' #> 2 'wk24' 'USUBJID' 'TRTA'     AOCC01FL == 'Y' 'Weeks 0 to 24' #>  #>  #>   Analysis parameter type: #>      name                                label #> 1   'rel'        'drug-related adverse events' #> 2 'aeosi' 'adverse events of special interest' #> 3   'any'                 'any adverse events' #> 4   'ser'             'serious adverse events' #>                                 subset #> 1 AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2                         AEOSI == 'Y' #> 3                                      #> 4                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                           label #> 1  'ae_summary'  'Table: adverse event summary' #> 2 'ae_specific' 'Table: specific adverse event' #>  #>  #> $`BLACK OR AFRICAN AMERICAN` #> ADaM metadata:  #>    .$data_population \tPopulation data with 23 subjects  #>    .$data_observation \tObservation data with 90 records  #>    .$plan \tAnalysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset                         label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>     name        id  group var          subset           label #> 1 'wk12' 'USUBJID' 'TRTA'        SAFFL == 'Y' 'Weeks 0 to 12' #> 2 'wk24' 'USUBJID' 'TRTA'     AOCC01FL == 'Y' 'Weeks 0 to 24' #>  #>  #>   Analysis parameter type: #>      name                                label #> 1   'rel'        'drug-related adverse events' #> 2 'aeosi' 'adverse events of special interest' #> 3   'any'                 'any adverse events' #> 4   'ser'             'serious adverse events' #>                                 subset #> 1 AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2                         AEOSI == 'Y' #> 3                                      #> 4                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                           label #> 1  'ae_summary'  'Table: adverse event summary' #> 2 'ae_specific' 'Table: specific adverse event' #>  #>  #> $WHITE #> ADaM metadata:  #>    .$data_population \tPopulation data with 230 subjects  #>    .$data_observation \tObservation data with 1086 records  #>    .$plan \tAnalysis plan with 10 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset                         label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>     name        id  group var          subset           label #> 1 'wk12' 'USUBJID' 'TRTA'        SAFFL == 'Y' 'Weeks 0 to 12' #> 2 'wk24' 'USUBJID' 'TRTA'     AOCC01FL == 'Y' 'Weeks 0 to 24' #>  #>  #>   Analysis parameter type: #>      name                                label #> 1   'rel'        'drug-related adverse events' #> 2 'aeosi' 'adverse events of special interest' #> 3   'any'                 'any adverse events' #> 4   'ser'             'serious adverse events' #>                                 subset #> 1 AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2                         AEOSI == 'Y' #> 3                                      #> 4                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                           label #> 1  'ae_summary'  'Table: adverse event summary' #> 2 'ae_specific' 'Table: specific adverse event' #>  #>"},{"path":"https://merck.github.io/metalite/reference/metalite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metalite: ADaM Metadata Structure — metalite-package","title":"metalite: ADaM Metadata Structure — metalite-package","text":"metadata structure clinical data analysis reporting based Analysis Data Model (ADaM) datasets.","code":""},{"path":[]},{"path":"https://merck.github.io/metalite/reference/metalite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metalite: ADaM Metadata Structure — metalite-package","text":"Maintainer: Yujie Zhao yujie.zhao@merck.com Authors: Yilong Zhang Nan Xiao contributors: Benjamin Wang [contributor] Brian Lang [contributor] Howard Baek [contributor] Ruchitbhai Patel [contributor] Madhusudhan Ginnaram [contributor] Sarad Nepal [contributor] Venkatesh Burla [contributor] Merck Sharp & Dohme Corp [copyright holder]","code":""},{"path":"https://merck.github.io/metalite/reference/outdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct outdata class — outdata","title":"Construct outdata class — outdata","text":"outdata class defines standard output format analysis reporting.","code":""},{"path":"https://merck.github.io/metalite/reference/outdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct outdata class — outdata","text":"","code":"outdata(   meta,   population,   observation,   parameter,   n,   order,   group,   reference_group,   ... )"},{"path":"https://merck.github.io/metalite/reference/outdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct outdata class — outdata","text":"meta metadata object created metalite. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information. n data frame number subjects criteria. order numeric vector row display order. group character vector group variable names ADaM dataset. reference_group numeric value indicate reference group levels group. ... Additional variables save outdata.","code":""},{"path":"https://merck.github.io/metalite/reference/outdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct outdata class — outdata","text":"list class outdata. Components list either quosures constants.","code":""},{"path":"https://merck.github.io/metalite/reference/outdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct outdata class — outdata","text":"design inspired ggplot2::aes().","code":""},{"path":"https://merck.github.io/metalite/reference/outdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct outdata class — outdata","text":"","code":"metalite:::outdata(   meta = meta_example(),   population = \"apat\",   observation = \"wk12\",   parameter = \"rel\",   n = data.frame(     TRTA = c(\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"),     n = c(86, 84, 84)   ),   group = \"TRTA\",   reference_group = 1,   order = 1:3 ) #> List of 8 #>  $ meta           :List of 7 #>  $ population     : chr \"apat\" #>  $ observation    : chr \"wk12\" #>  $ parameter      : chr \"rel\" #>  $ n              :'data.frame':\t3 obs. of  2 variables: #>  $ order          : int [1:3] 1 2 3 #>  $ group          : chr \"TRTA\" #>  $ reference_group: num 1"},{"path":"https://merck.github.io/metalite/reference/plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a analysis plan from all combination of variables — plan","title":"Create a analysis plan from all combination of variables — plan","text":"function wrapper base::expand.grid().","code":""},{"path":"https://merck.github.io/metalite/reference/plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a analysis plan from all combination of variables — plan","text":"","code":"plan(analysis, population, observation, parameter, mock = 1, ...)"},{"path":"https://merck.github.io/metalite/reference/plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a analysis plan from all combination of variables — plan","text":"analysis character value analysis term name. term name used key link information. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information. mock numeric value mock table number. ... Additional arguments.","code":""},{"path":"https://merck.github.io/metalite/reference/plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a analysis plan from all combination of variables — plan","text":"data frame containing analysis plan.","code":""},{"path":"https://merck.github.io/metalite/reference/plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a analysis plan from all combination of variables — plan","text":"","code":"# Example 1 # Create an analysis plan of AE summary # with any AE, drug-related AE, and serious AE plan(   analysis = \"ae_summary\",   population = \"apat\",   observation = c(\"wk12\", \"wk24\"),   parameter = \"any;rel;ser\" ) #>   mock   analysis population observation   parameter #> 1    1 ae_summary       apat        wk12 any;rel;ser #> 2    1 ae_summary       apat        wk24 any;rel;ser  # Example 2 # Create an analysis plan of AE specific # with any AE, drug-related AE, and serious AE plan(   analysis = \"ae_specific\",   population = \"apat\",   observation = c(\"wk12\", \"wk24\"),   parameter = c(\"any\", \"rel\", \"ser\") ) #>   mock    analysis population observation parameter #> 1    1 ae_specific       apat        wk12       any #> 2    1 ae_specific       apat        wk24       any #> 3    1 ae_specific       apat        wk12       rel #> 4    1 ae_specific       apat        wk24       rel #> 5    1 ae_specific       apat        wk12       ser #> 6    1 ae_specific       apat        wk24       ser"},{"path":"https://merck.github.io/metalite/reference/print.meta_adam.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a metadata object with its population, observation, and analysis plans — print.meta_adam","title":"Print a metadata object with its population, observation, and analysis plans — print.meta_adam","text":"Print metadata object population, observation, analysis plans","code":""},{"path":"https://merck.github.io/metalite/reference/print.meta_adam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a metadata object with its population, observation, and analysis plans — print.meta_adam","text":"","code":"# S3 method for meta_adam print(x, ...)"},{"path":"https://merck.github.io/metalite/reference/print.meta_adam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a metadata object with its population, observation, and analysis plans — print.meta_adam","text":"x object returned meta_adam(). ... Additional parameters print() (used).","code":""},{"path":"https://merck.github.io/metalite/reference/print.meta_adam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a metadata object with its population, observation, and analysis plans — print.meta_adam","text":"printed summary metadata.","code":""},{"path":"https://merck.github.io/metalite/reference/print.meta_adam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a metadata object with its population, observation, and analysis plans — print.meta_adam","text":"","code":"meta_adam(observation = r2rtf::r2rtf_adae, population = r2rtf::r2rtf_adae) |> print() #> ADaM metadata:  #>    .$data_population \tPopulation data with 1191 subjects  #>    .$data_observation \tObservation data with 1191 records  #>  #>"},{"path":"https://merck.github.io/metalite/reference/spec_analysis_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Specification for population definition — spec_analysis_population","title":"Specification for population definition — spec_analysis_population","text":"Specification population definition","code":""},{"path":"https://merck.github.io/metalite/reference/spec_analysis_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specification for population definition — spec_analysis_population","text":"","code":"spec_analysis_population(meta)"},{"path":"https://merck.github.io/metalite/reference/spec_analysis_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specification for population definition — spec_analysis_population","text":"meta meta_adam object.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_analysis_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specification for population definition — spec_analysis_population","text":"vector character strings containing populations used order analysis plans.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_analysis_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specification for population definition — spec_analysis_population","text":"","code":"meta <- meta_example() spec_analysis_population(meta) #>  [1] \"Population: SAFFL == 'Y'\\nObservation: SAFFL == 'Y'\"                                         #>  [2] \"Population: SAFFL == 'Y'\\nObservation: AOCC01FL == 'Y'\"                                      #>  [3] \"Population: SAFFL == 'Y'\\nObservation: SAFFL == 'Y'\"                                         #>  [4] \"Population: SAFFL == 'Y'\\nObservation: AOCC01FL == 'Y'\"                                      #>  [5] \"Population: SAFFL == 'Y'\\nObservation: SAFFL == 'Y' AEOSI == 'Y'\"                            #>  [6] \"Population: SAFFL == 'Y'\\nObservation: AOCC01FL == 'Y' AEOSI == 'Y'\"                         #>  [7] \"Population: SAFFL == 'Y'\\nObservation: SAFFL == 'Y' AEREL %in% c('POSSIBLE', 'PROBABLE')\"    #>  [8] \"Population: SAFFL == 'Y'\\nObservation: AOCC01FL == 'Y' AEREL %in% c('POSSIBLE', 'PROBABLE')\" #>  [9] \"Population: SAFFL == 'Y'\\nObservation: SAFFL == 'Y' AESER == 'Y'\"                            #> [10] \"Population: SAFFL == 'Y'\\nObservation: AOCC01FL == 'Y' AESER == 'Y'\""},{"path":"https://merck.github.io/metalite/reference/spec_call_program.html","id":null,"dir":"Reference","previous_headings":"","what":"Specification for analysis call program — spec_call_program","title":"Specification for analysis call program — spec_call_program","text":"Specification analysis call program","code":""},{"path":"https://merck.github.io/metalite/reference/spec_call_program.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specification for analysis call program — spec_call_program","text":"","code":"spec_call_program(meta, ...)"},{"path":"https://merck.github.io/metalite/reference/spec_call_program.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specification for analysis call program — spec_call_program","text":"meta meta_adam object. ... Additional arguments used call programs.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_call_program.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specification for analysis call program — spec_call_program","text":"vector character strings containing call program order analysis plans.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_call_program.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specification for analysis call program — spec_call_program","text":"","code":"meta <- meta_example() spec_call_program(meta) #>  [1] \"ae_summary(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any;rel;ser')\" #>  [2] \"ae_summary(meta = meta, population = 'apat', observation = 'wk24', parameter = 'any;rel;ser')\" #>  [3] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any')\"        #>  [4] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'any')\"        #>  [5] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'aeosi')\"      #>  [6] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'aeosi')\"      #>  [7] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'rel')\"        #>  [8] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'rel')\"        #>  [9] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'ser')\"        #> [10] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'ser')\"        spec_call_program(meta, data_source = \"[Study CDISCpilot: adam-adsl; adae]\") #>  [1] \"ae_summary(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any;rel;ser', data_source = '[Study CDISCpilot: adam-adsl; adae]')\" #>  [2] \"ae_summary(meta = meta, population = 'apat', observation = 'wk24', parameter = 'any;rel;ser', data_source = '[Study CDISCpilot: adam-adsl; adae]')\" #>  [3] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'any', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"        #>  [4] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'any', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"        #>  [5] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'aeosi', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"      #>  [6] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'aeosi', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"      #>  [7] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'rel', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"        #>  [8] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'rel', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"        #>  [9] \"ae_specific(meta = meta, population = 'apat', observation = 'wk12', parameter = 'ser', data_source = '[Study CDISCpilot: adam-adsl; adae]')\"        #> [10] \"ae_specific(meta = meta, population = 'apat', observation = 'wk24', parameter = 'ser', data_source = '[Study CDISCpilot: adam-adsl; adae]')\""},{"path":"https://merck.github.io/metalite/reference/spec_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Specification for analysis output filename — spec_filename","title":"Specification for analysis output filename — spec_filename","text":"Specification analysis output filename","code":""},{"path":"https://merck.github.io/metalite/reference/spec_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specification for analysis output filename — spec_filename","text":"","code":"spec_filename(meta)"},{"path":"https://merck.github.io/metalite/reference/spec_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specification for analysis output filename — spec_filename","text":"meta meta_adam object.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specification for analysis output filename — spec_filename","text":"vector character strings containing RTF file names.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specification for analysis output filename — spec_filename","text":"","code":"meta <- meta_example() spec_filename(meta) #>  [1] \"ae0summary0wk12.rtf\"        \"ae0summary0wk24.rtf\"        #>  [3] \"ae0specific0wk120any.rtf\"   \"ae0specific0wk240any.rtf\"   #>  [5] \"ae0specific0wk120aeosi.rtf\" \"ae0specific0wk240aeosi.rtf\" #>  [7] \"ae0specific0wk120rel.rtf\"   \"ae0specific0wk240rel.rtf\"   #>  [9] \"ae0specific0wk120ser.rtf\"   \"ae0specific0wk240ser.rtf\""},{"path":"https://merck.github.io/metalite/reference/spec_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Specification for analysis title — spec_title","title":"Specification for analysis title — spec_title","text":"Specification analysis title","code":""},{"path":"https://merck.github.io/metalite/reference/spec_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specification for analysis title — spec_title","text":"","code":"spec_title(meta)"},{"path":"https://merck.github.io/metalite/reference/spec_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specification for analysis title — spec_title","text":"meta meta_adam object.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specification for analysis title — spec_title","text":"vector character strings containing table captions order analysis plans.","code":""},{"path":"https://merck.github.io/metalite/reference/spec_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specification for analysis title — spec_title","text":"","code":"meta <- meta_example() spec_title(meta) #>  [1] \"Summary of Adverse Events\\nWeeks 0 to 12\\nAll Participants as Treated\"                            #>  [2] \"Summary of Adverse Events\\nWeeks 0 to 24\\nAll Participants as Treated\"                            #>  [3] \"Participants With Adverse Events\\nWeeks 0 to 12\\nAll Participants as Treated\"                     #>  [4] \"Participants With Adverse Events\\nWeeks 0 to 24\\nAll Participants as Treated\"                     #>  [5] \"Participants With Adverse Events of special interest\\nWeeks 0 to 12\\nAll Participants as Treated\" #>  [6] \"Participants With Adverse Events of special interest\\nWeeks 0 to 24\\nAll Participants as Treated\" #>  [7] \"Participants With Drug-Related Adverse Events\\nWeeks 0 to 12\\nAll Participants as Treated\"        #>  [8] \"Participants With Drug-Related Adverse Events\\nWeeks 0 to 24\\nAll Participants as Treated\"        #>  [9] \"Participants With Serious Adverse Events\\nWeeks 0 to 12\\nAll Participants as Treated\"             #> [10] \"Participants With Serious Adverse Events\\nWeeks 0 to 24\\nAll Participants as Treated\""},{"path":"https://merck.github.io/metalite/reference/update_adam_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Update mapping rule in adam_mapping — update_adam_mapping","title":"Update mapping rule in adam_mapping — update_adam_mapping","text":"Update mapping rule adam_mapping","code":""},{"path":"https://merck.github.io/metalite/reference/update_adam_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update mapping rule in adam_mapping — update_adam_mapping","text":"","code":"update_adam_mapping(meta, name, ...)"},{"path":"https://merck.github.io/metalite/reference/update_adam_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update mapping rule in adam_mapping — update_adam_mapping","text":"meta meta_adam object. name vector keywords. ... Additional variables added mapping rule among keywords.","code":""},{"path":"https://merck.github.io/metalite/reference/update_adam_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update mapping rule in adam_mapping — update_adam_mapping","text":"metadata object input updated.","code":""},{"path":"https://merck.github.io/metalite/reference/update_adam_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update mapping rule in adam_mapping — update_adam_mapping","text":"","code":"meta <- meta_example() meta <- update_adam_mapping(meta, names(meta$parameter), start_date = \"ASTDT\") collect_adam_mapping(meta, \"ser\") #> ADaM mapping:  #> * `name`       -> \"ser\" #> * `id`         -> NULL #> * `group`      -> NULL #> * `var`        -> \"AEDECOD\" #> * `subset`     -> AESER == \"Y\" #> * `label`      -> \"serious adverse events\" #> * `soc`        -> \"AEBODSYS\" #> * `seq`        -> 401 #> * `term1`      -> \"Serious\" #> * `term2`      -> \"\" #> * `summ_row`   -> \"with serious adverse events\" #> * `.location`  -> \"parameter\" #> * `start_date` -> \"ASTDT\""},{"path":"https://merck.github.io/metalite/news/index.html","id":"metalite-010","dir":"Changelog","previous_headings":"","what":"metalite 0.1.0","title":"metalite 0.1.0","text":"Initial version. Added NEWS.md file track changes package.","code":""}]
